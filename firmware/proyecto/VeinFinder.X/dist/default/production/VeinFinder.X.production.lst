

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Oct 10 11:23:56 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F15323
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 11/01/2024 GMT
    19                           ; 
    20                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F15323 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0008                     bsr             equ	8
    53     0005                     fsr0h           equ	5
    54     0004                     fsr0l           equ	4
    55     0007                     fsr1h           equ	7
    56     0006                     fsr1l           equ	6
    57     0000                     indf            equ	0
    58     0000                     indf0           equ	0
    59     0001                     indf1           equ	1
    60     000B                     intcon          equ	11
    61     0002                     pc              equ	2
    62     0002                     pcl             equ	2
    63     000A                     pclath          equ	10
    64     0003                     status          equ	3
    65     0009                     wreg            equ	9
    66     0000                     INDF0           equ	0	;# 
    67     0001                     INDF1           equ	1	;# 
    68     0002                     PCL             equ	2	;# 
    69     0003                     STATUS          equ	3	;# 
    70     0004                     FSR0L           equ	4	;# 
    71     0005                     FSR0H           equ	5	;# 
    72     0006                     FSR1L           equ	6	;# 
    73     0007                     FSR1H           equ	7	;# 
    74     0008                     BSR             equ	8	;# 
    75     0009                     WREG            equ	9	;# 
    76     000A                     PCLATH          equ	10	;# 
    77     000B                     INTCON          equ	11	;# 
    78     000C                     PORTA           equ	12	;# 
    79     000E                     PORTC           equ	14	;# 
    80     0012                     TRISA           equ	18	;# 
    81     0014                     TRISC           equ	20	;# 
    82     0018                     LATA            equ	24	;# 
    83     001A                     LATC            equ	26	;# 
    84     009B                     ADRES           equ	155	;# 
    85     009B                     ADRESL          equ	155	;# 
    86     009C                     ADRESH          equ	156	;# 
    87     009D                     ADCON0          equ	157	;# 
    88     009E                     ADCON1          equ	158	;# 
    89     009F                     ADACT           equ	159	;# 
    90     0119                     RC1REG          equ	281	;# 
    91     0119                     RCREG           equ	281	;# 
    92     0119                     RCREG1          equ	281	;# 
    93     011A                     TX1REG          equ	282	;# 
    94     011A                     TXREG1          equ	282	;# 
    95     011A                     TXREG           equ	282	;# 
    96     011B                     SP1BRG          equ	283	;# 
    97     011B                     SPBRG           equ	283	;# 
    98     011B                     SP1BRGL         equ	283	;# 
    99     011B                     SPBRG1          equ	283	;# 
   100     011B                     SPBRGL          equ	283	;# 
   101     011C                     SP1BRGH         equ	284	;# 
   102     011C                     SPBRGH          equ	284	;# 
   103     011C                     SPBRGH1         equ	284	;# 
   104     011D                     RC1STA          equ	285	;# 
   105     011D                     RCSTA1          equ	285	;# 
   106     011D                     RCSTA           equ	285	;# 
   107     011E                     TX1STA          equ	286	;# 
   108     011E                     TXSTA1          equ	286	;# 
   109     011E                     TXSTA           equ	286	;# 
   110     011F                     BAUD1CON        equ	287	;# 
   111     011F                     BAUDCON1        equ	287	;# 
   112     011F                     BAUDCTL1        equ	287	;# 
   113     011F                     BAUDCON         equ	287	;# 
   114     011F                     BAUDCTL         equ	287	;# 
   115     018C                     SSP1BUF         equ	396	;# 
   116     018D                     SSP1ADD         equ	397	;# 
   117     018E                     SSP1MSK         equ	398	;# 
   118     018F                     SSP1STAT        equ	399	;# 
   119     0190                     SSP1CON1        equ	400	;# 
   120     0191                     SSP1CON2        equ	401	;# 
   121     0192                     SSP1CON3        equ	402	;# 
   122     020C                     TMR1            equ	524	;# 
   123     020C                     TMR1L           equ	524	;# 
   124     020D                     TMR1H           equ	525	;# 
   125     020E                     T1CON           equ	526	;# 
   126     020F                     T1GCON          equ	527	;# 
   127     020F                     PR1             equ	527	;# 
   128     0210                     T1GATE          equ	528	;# 
   129     0210                     TMR1GATE        equ	528	;# 
   130     0211                     T1CLK           equ	529	;# 
   131     0211                     TMR1CLK         equ	529	;# 
   132     028C                     T2TMR           equ	652	;# 
   133     028C                     TMR2            equ	652	;# 
   134     028D                     T2PR            equ	653	;# 
   135     028D                     PR2             equ	653	;# 
   136     028E                     T2CON           equ	654	;# 
   137     028F                     T2HLT           equ	655	;# 
   138     0290                     T2CLKCON        equ	656	;# 
   139     0291                     T2RST           equ	657	;# 
   140     030C                     CCPR1           equ	780	;# 
   141     030C                     CCPR1L          equ	780	;# 
   142     030D                     CCPR1H          equ	781	;# 
   143     030E                     CCP1CON         equ	782	;# 
   144     030F                     CCP1CAP         equ	783	;# 
   145     0310                     CCPR2           equ	784	;# 
   146     0310                     CCPR2L          equ	784	;# 
   147     0311                     CCPR2H          equ	785	;# 
   148     0312                     CCP2CON         equ	786	;# 
   149     0313                     CCP2CAP         equ	787	;# 
   150     0314                     PWM3DC          equ	788	;# 
   151     0314                     PWM3DCL         equ	788	;# 
   152     0315                     PWM3DCH         equ	789	;# 
   153     0316                     PWM3CON         equ	790	;# 
   154     0318                     PWM4DC          equ	792	;# 
   155     0318                     PWM4DCL         equ	792	;# 
   156     0319                     PWM4DCH         equ	793	;# 
   157     031A                     PWM4CON         equ	794	;# 
   158     031C                     PWM5DC          equ	796	;# 
   159     031C                     PWM5DCL         equ	796	;# 
   160     031D                     PWM5DCH         equ	797	;# 
   161     031E                     PWM5CON         equ	798	;# 
   162     038C                     PWM6DC          equ	908	;# 
   163     038C                     PWM6DCL         equ	908	;# 
   164     038D                     PWM6DCH         equ	909	;# 
   165     038E                     PWM6CON         equ	910	;# 
   166     058C                     NCO1ACC         equ	1420	;# 
   167     058C                     NCO1ACCL        equ	1420	;# 
   168     058D                     NCO1ACCH        equ	1421	;# 
   169     058E                     NCO1ACCU        equ	1422	;# 
   170     058F                     NCO1INC         equ	1423	;# 
   171     058F                     NCO1INCL        equ	1423	;# 
   172     0590                     NCO1INCH        equ	1424	;# 
   173     0591                     NCO1INCU        equ	1425	;# 
   174     0592                     NCO1CON         equ	1426	;# 
   175     0593                     NCO1CLK         equ	1427	;# 
   176     059C                     TMR0L           equ	1436	;# 
   177     059C                     TMR0            equ	1436	;# 
   178     059D                     TMR0H           equ	1437	;# 
   179     059D                     PR0             equ	1437	;# 
   180     059E                     T0CON0          equ	1438	;# 
   181     059F                     T0CON1          equ	1439	;# 
   182     060C                     CWG1CLKCON      equ	1548	;# 
   183     060D                     CWG1DAT         equ	1549	;# 
   184     060E                     CWG1DBR         equ	1550	;# 
   185     060F                     CWG1DBF         equ	1551	;# 
   186     0610                     CWG1CON0        equ	1552	;# 
   187     0611                     CWG1CON1        equ	1553	;# 
   188     0612                     CWG1AS0         equ	1554	;# 
   189     0613                     CWG1AS1         equ	1555	;# 
   190     0614                     CWG1STR         equ	1556	;# 
   191     070C                     PIR0            equ	1804	;# 
   192     070D                     PIR1            equ	1805	;# 
   193     070E                     PIR2            equ	1806	;# 
   194     070F                     PIR3            equ	1807	;# 
   195     0710                     PIR4            equ	1808	;# 
   196     0711                     PIR5            equ	1809	;# 
   197     0712                     PIR6            equ	1810	;# 
   198     0713                     PIR7            equ	1811	;# 
   199     0716                     PIE0            equ	1814	;# 
   200     0717                     PIE1            equ	1815	;# 
   201     0718                     PIE2            equ	1816	;# 
   202     0719                     PIE3            equ	1817	;# 
   203     071A                     PIE4            equ	1818	;# 
   204     071B                     PIE5            equ	1819	;# 
   205     071C                     PIE6            equ	1820	;# 
   206     071D                     PIE7            equ	1821	;# 
   207     0796                     PMD0            equ	1942	;# 
   208     0797                     PMD1            equ	1943	;# 
   209     0798                     PMD2            equ	1944	;# 
   210     0799                     PMD3            equ	1945	;# 
   211     079A                     PMD4            equ	1946	;# 
   212     079B                     PMD5            equ	1947	;# 
   213     080C                     WDTCON0         equ	2060	;# 
   214     080D                     WDTCON1         equ	2061	;# 
   215     080E                     WDTPSL          equ	2062	;# 
   216     080F                     WDTPSH          equ	2063	;# 
   217     0810                     WDTTMR          equ	2064	;# 
   218     0811                     BORCON          equ	2065	;# 
   219     0812                     VREGCON         equ	2066	;# 
   220     0813                     PCON0           equ	2067	;# 
   221     0814                     PCON1           equ	2068	;# 
   222     081A                     NVMADR          equ	2074	;# 
   223     081A                     NVMADRL         equ	2074	;# 
   224     081B                     NVMADRH         equ	2075	;# 
   225     081C                     NVMDAT          equ	2076	;# 
   226     081C                     NVMDATL         equ	2076	;# 
   227     081D                     NVMDATH         equ	2077	;# 
   228     081E                     NVMCON1         equ	2078	;# 
   229     081F                     NVMCON2         equ	2079	;# 
   230     088C                     CPUDOZE         equ	2188	;# 
   231     088D                     OSCCON1         equ	2189	;# 
   232     088E                     OSCCON2         equ	2190	;# 
   233     088F                     OSCCON3         equ	2191	;# 
   234     0890                     OSCSTAT         equ	2192	;# 
   235     0891                     OSCEN           equ	2193	;# 
   236     0892                     OSCTUNE         equ	2194	;# 
   237     0893                     OSCFRQ          equ	2195	;# 
   238     0895                     CLKRCON         equ	2197	;# 
   239     0896                     CLKRCLK         equ	2198	;# 
   240     090C                     FVRCON          equ	2316	;# 
   241     090E                     DAC1CON0        equ	2318	;# 
   242     090F                     DAC1CON1        equ	2319	;# 
   243     091F                     ZCDCON          equ	2335	;# 
   244     098F                     CMOUT           equ	2447	;# 
   245     098F                     CMSTAT          equ	2447	;# 
   246     0990                     CM1CON0         equ	2448	;# 
   247     0991                     CM1CON1         equ	2449	;# 
   248     0992                     CM1NCH          equ	2450	;# 
   249     0993                     CM1PCH          equ	2451	;# 
   250     0994                     CM2CON0         equ	2452	;# 
   251     0995                     CM2CON1         equ	2453	;# 
   252     0996                     CM2NCH          equ	2454	;# 
   253     0997                     CM2PCH          equ	2455	;# 
   254     1E0F                     CLCDATA         equ	7695	;# 
   255     1E10                     CLC1CON         equ	7696	;# 
   256     1E11                     CLC1POL         equ	7697	;# 
   257     1E12                     CLC1SEL0        equ	7698	;# 
   258     1E13                     CLC1SEL1        equ	7699	;# 
   259     1E14                     CLC1SEL2        equ	7700	;# 
   260     1E15                     CLC1SEL3        equ	7701	;# 
   261     1E16                     CLC1GLS0        equ	7702	;# 
   262     1E17                     CLC1GLS1        equ	7703	;# 
   263     1E18                     CLC1GLS2        equ	7704	;# 
   264     1E19                     CLC1GLS3        equ	7705	;# 
   265     1E1A                     CLC2CON         equ	7706	;# 
   266     1E1B                     CLC2POL         equ	7707	;# 
   267     1E1C                     CLC2SEL0        equ	7708	;# 
   268     1E1D                     CLC2SEL1        equ	7709	;# 
   269     1E1E                     CLC2SEL2        equ	7710	;# 
   270     1E1F                     CLC2SEL3        equ	7711	;# 
   271     1E20                     CLC2GLS0        equ	7712	;# 
   272     1E21                     CLC2GLS1        equ	7713	;# 
   273     1E22                     CLC2GLS2        equ	7714	;# 
   274     1E23                     CLC2GLS3        equ	7715	;# 
   275     1E24                     CLC3CON         equ	7716	;# 
   276     1E25                     CLC3POL         equ	7717	;# 
   277     1E26                     CLC3SEL0        equ	7718	;# 
   278     1E27                     CLC3SEL1        equ	7719	;# 
   279     1E28                     CLC3SEL2        equ	7720	;# 
   280     1E29                     CLC3SEL3        equ	7721	;# 
   281     1E2A                     CLC3GLS0        equ	7722	;# 
   282     1E2B                     CLC3GLS1        equ	7723	;# 
   283     1E2C                     CLC3GLS2        equ	7724	;# 
   284     1E2D                     CLC3GLS3        equ	7725	;# 
   285     1E2E                     CLC4CON         equ	7726	;# 
   286     1E2F                     CLC4POL         equ	7727	;# 
   287     1E30                     CLC4SEL0        equ	7728	;# 
   288     1E31                     CLC4SEL1        equ	7729	;# 
   289     1E32                     CLC4SEL2        equ	7730	;# 
   290     1E33                     CLC4SEL3        equ	7731	;# 
   291     1E34                     CLC4GLS0        equ	7732	;# 
   292     1E35                     CLC4GLS1        equ	7733	;# 
   293     1E36                     CLC4GLS2        equ	7734	;# 
   294     1E37                     CLC4GLS3        equ	7735	;# 
   295     1E8F                     PPSLOCK         equ	7823	;# 
   296     1E90                     INTPPS          equ	7824	;# 
   297     1E91                     T0CKIPPS        equ	7825	;# 
   298     1E92                     T1CKIPPS        equ	7826	;# 
   299     1E93                     T1GPPS          equ	7827	;# 
   300     1E9C                     T2INPPS         equ	7836	;# 
   301     1EA1                     CCP1PPS         equ	7841	;# 
   302     1EA2                     CCP2PPS         equ	7842	;# 
   303     1EB1                     CWG1PPS         equ	7857	;# 
   304     1EBB                     CLCIN0PPS       equ	7867	;# 
   305     1EBC                     CLCIN1PPS       equ	7868	;# 
   306     1EBD                     CLCIN2PPS       equ	7869	;# 
   307     1EBE                     CLCIN3PPS       equ	7870	;# 
   308     1EC3                     ADACTPPS        equ	7875	;# 
   309     1EC5                     SSP1CLKPPS      equ	7877	;# 
   310     1EC6                     SSP1DATPPS      equ	7878	;# 
   311     1EC7                     SSP1SSPPS       equ	7879	;# 
   312     1ECB                     RX1DTPPS        equ	7883	;# 
   313     1ECC                     TX1CKPPS        equ	7884	;# 
   314     1F10                     RA0PPS          equ	7952	;# 
   315     1F11                     RA1PPS          equ	7953	;# 
   316     1F12                     RA2PPS          equ	7954	;# 
   317     1F13                     RA3PPS          equ	7955	;# 
   318     1F14                     RA4PPS          equ	7956	;# 
   319     1F15                     RA5PPS          equ	7957	;# 
   320     1F20                     RC0PPS          equ	7968	;# 
   321     1F21                     RC1PPS          equ	7969	;# 
   322     1F22                     RC2PPS          equ	7970	;# 
   323     1F23                     RC3PPS          equ	7971	;# 
   324     1F24                     RC4PPS          equ	7972	;# 
   325     1F25                     RC5PPS          equ	7973	;# 
   326     1F38                     ANSELA          equ	7992	;# 
   327     1F39                     WPUA            equ	7993	;# 
   328     1F3A                     ODCONA          equ	7994	;# 
   329     1F3B                     SLRCONA         equ	7995	;# 
   330     1F3C                     INLVLA          equ	7996	;# 
   331     1F3D                     IOCAP           equ	7997	;# 
   332     1F3E                     IOCAN           equ	7998	;# 
   333     1F3F                     IOCAF           equ	7999	;# 
   334     1F4E                     ANSELC          equ	8014	;# 
   335     1F4F                     WPUC            equ	8015	;# 
   336     1F50                     ODCONC          equ	8016	;# 
   337     1F51                     SLRCONC         equ	8017	;# 
   338     1F52                     INLVLC          equ	8018	;# 
   339     1F53                     IOCCP           equ	8019	;# 
   340     1F54                     IOCCN           equ	8020	;# 
   341     1F55                     IOCCF           equ	8021	;# 
   342     1FE4                     STATUS_SHAD     equ	8164	;# 
   343     1FE5                     WREG_SHAD       equ	8165	;# 
   344     1FE6                     BSR_SHAD        equ	8166	;# 
   345     1FE7                     PCLATH_SHAD     equ	8167	;# 
   346     1FE8                     FSR0_SHAD       equ	8168	;# 
   347     1FE8                     FSR0L_SHAD      equ	8168	;# 
   348     1FE9                     FSR0H_SHAD      equ	8169	;# 
   349     1FEA                     FSR1_SHAD       equ	8170	;# 
   350     1FEA                     FSR1L_SHAD      equ	8170	;# 
   351     1FEB                     FSR1H_SHAD      equ	8171	;# 
   352     1FED                     STKPTR          equ	8173	;# 
   353     1FEE                     TOSL            equ	8174	;# 
   354     1FEF                     TOSH            equ	8175	;# 
   355                           
   356                           	psect	idataBANK0
   357     066B                     __pidataBANK0:
   358                           
   359                           ;initializer for _orange_level
   360     066B  3405               	retlw	5
   361                           
   362                           ;initializer for _red_level
   363     066C  3405               	retlw	5
   364     000C                     _PORTAbits      set	12
   365     000E                     _PORTCbits      set	14
   366     001A                     _LATCbits       set	26
   367     0012                     _TRISAbits      set	18
   368     0014                     _TRISCbits      set	20
   369     028E                     _T2CONbits      set	654
   370     028C                     _T2TMR          set	652
   371     028D                     _T2PR           set	653
   372     0291                     _T2RST          set	657
   373     028F                     _T2HLT          set	655
   374     0290                     _T2CLKCON       set	656
   375     028E                     _T2CON          set	654
   376     0318                     _PWM4DCL        set	792
   377     0319                     _PWM4DCH        set	793
   378     031A                     _PWM4CON        set	794
   379     0314                     _PWM3DCL        set	788
   380     0315                     _PWM3DCH        set	789
   381     0316                     _PWM3CON        set	790
   382     1E8F                     _PPSLOCKbits    set	7823
   383     1E8F                     _PPSLOCK        set	7823
   384     1F4F                     _WPUCbits       set	8015
   385     1F39                     _WPUAbits       set	7993
   386     1F4E                     _ANSELCbits     set	8014
   387     1F38                     _ANSELAbits     set	7992
   388     1F24                     _RC4PPS         set	7972
   389     1F23                     _RC3PPS         set	7971
   390                           
   391                           	psect	cinit
   392     07F5                     start_initialization:	
   393                           ; #config settings
   394                           
   395     07F5                     __initialization:
   396                           
   397                           ; Initialize objects allocated to BANK0
   398     07F5  3186  266B  3187   	fcall	__pidataBANK0	;fetch initializer
   399     07F8  00A0               	movwf	__pdataBANK0& (0+127)
   400     07F9  3186  266C  3187   	fcall	__pidataBANK0+1	;fetch initializer
   401     07FC  00A1               	movwf	(__pdataBANK0+1)& (0+127)
   402                           
   403                           ; Clear objects allocated to COMMON
   404     07FD  01FD               	clrf	__pbssCOMMON& (0+127)
   405     07FE                     end_of_initialization:	
   406                           ;End of C runtime variable initialization code
   407                           
   408     07FE                     __end_of__initialization:
   409     07FE  0140               	movlb	0
   410     07FF  2F46               	ljmp	_main	;jump to C main() function
   411                           
   412                           	psect	bssCOMMON
   413     007D                     __pbssCOMMON:
   414     007D                     _current_color:
   415     007D                     	ds	1
   416                           
   417                           	psect	dataBANK0
   418     0020                     __pdataBANK0:
   419     0020                     _orange_level:
   420     0020                     	ds	1
   421     0021                     _red_level:
   422     0021                     	ds	1
   423                           
   424                           	psect	cstackCOMMON
   425     0070                     __pcstackCOMMON:
   426     0070                     ?_initialize:
   427     0070                     ?_blink:	
   428                           ; 1 bytes @ 0x0
   429                           
   430     0070                     ?_update_leds:	
   431                           ; 1 bytes @ 0x0
   432                           
   433     0070                     ?_main:	
   434                           ; 1 bytes @ 0x0
   435                           
   436     0070                     ?___wmul:	
   437                           ; 1 bytes @ 0x0
   438                           
   439     0070                     ___wmul@multiplier:	
   440                           ; 2 bytes @ 0x0
   441                           
   442     0070                     ??_initialize:	
   443                           ; 2 bytes @ 0x0
   444                           
   445     0070                     ??_blink:	
   446                           ; 1 bytes @ 0x0
   447                           
   448                           
   449                           ; 1 bytes @ 0x0
   450     0070                     	ds	2
   451     0072                     ___wmul@multiplicand:
   452                           
   453                           ; 2 bytes @ 0x2
   454     0072                     	ds	2
   455     0074                     ___wmul@product:
   456     0074                     ??___wmul:	
   457                           ; 2 bytes @ 0x4
   458                           
   459                           
   460                           ; 1 bytes @ 0x4
   461     0074                     	ds	2
   462     0076                     ?_set_pwm_duty:
   463     0076                     set_pwm_duty@level:	
   464                           ; 1 bytes @ 0x6
   465                           
   466                           
   467                           ; 1 bytes @ 0x6
   468     0076                     	ds	1
   469     0077                     ??_set_pwm_duty:
   470                           
   471                           ; 1 bytes @ 0x7
   472     0077                     	ds	2
   473     0079                     set_pwm_duty@pwm:
   474                           
   475                           ; 1 bytes @ 0x9
   476     0079                     	ds	1
   477     007A                     set_pwm_duty@duty:
   478                           
   479                           ; 2 bytes @ 0xA
   480     007A                     	ds	2
   481     007C                     ??_update_leds:
   482     007C                     ??_main:	
   483                           ; 1 bytes @ 0xC
   484                           
   485                           
   486                           ; 1 bytes @ 0xC
   487     007C                     	ds	1
   488                           
   489                           	psect	maintext
   490     0746                     __pmaintext:	
   491 ;;
   492 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   493 ;;
   494 ;; *************** function _main *****************
   495 ;; Defined at:
   496 ;;		line 164 in file "main.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;		None
   499 ;; Auto vars:     Size  Location     Type
   500 ;;		None
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      void 
   503 ;; Registers used:
   504 ;;		wreg, status,2, status,0, pclath, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : B3F/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   510 ;;      Params:         0       0       0       0
   511 ;;      Locals:         0       0       0       0
   512 ;;      Temps:          1       0       0       0
   513 ;;      Totals:         1       0       0       0
   514 ;;Total ram usage:        1 bytes
   515 ;; Hardware stack levels required when called: 3
   516 ;; This function calls:
   517 ;;		_blink
   518 ;;		_initialize
   519 ;;		_update_leds
   520 ;; This function is called by:
   521 ;;		Startup code after reset
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525     0746                     _main:	
   526                           ;psect for function _main
   527                           
   528     0746                     l825:	
   529                           ;incstack = 0
   530                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   531                           
   532                           
   533                           ;main.c: 165:     initialize();
   534     0746  3186  26BD  3187   	fcall	_initialize
   535     0749                     l827:
   536                           
   537                           ;main.c: 166:     blink();
   538     0749  3186  266D  3187   	fcall	_blink
   539     074C                     l829:
   540                           
   541                           ;main.c: 167:     blink();
   542     074C  3186  266D  3187   	fcall	_blink
   543     074F                     l831:
   544                           
   545                           ;main.c: 168:     blink();
   546     074F  3186  266D  3187   	fcall	_blink
   547     0752                     l833:
   548                           
   549                           ;main.c: 170:     current_color = 1;
   550     0752  3001               	movlw	1
   551     0753  00FD               	movwf	_current_color
   552     0754                     l835:
   553                           
   554                           ;main.c: 171:     update_leds();
   555     0754  3186  2684  3187   	fcall	_update_leds
   556     0757                     l837:
   557                           
   558                           ;main.c: 172:     current_color = 0;
   559     0757  01FD               	clrf	_current_color
   560     0758                     l839:
   561                           
   562                           ;main.c: 173:     update_leds();
   563     0758  3186  2684  3187   	fcall	_update_leds
   564     075B                     l841:
   565                           
   566                           ;main.c: 175:     LATCbits.LATC2 = 1;
   567     075B  0140               	movlb	0	; select bank0
   568     075C  151A               	bsf	26,2	;volatile
   569     075D                     l843:
   570                           
   571                           ;main.c: 176:     current_color = 1;
   572     075D  3001               	movlw	1
   573     075E  00FD               	movwf	_current_color
   574     075F                     l845:
   575                           
   576                           ;main.c: 180:         if (PORTCbits.RC5 == 0) {
   577     075F  0140               	movlb	0	; select bank0
   578     0760  1A8E               	btfsc	14,5	;volatile
   579     0761  2F63               	goto	u441
   580     0762  2F64               	goto	u440
   581     0763                     u441:
   582     0763  2F8B               	goto	l86
   583     0764                     u440:
   584     0764                     l847:
   585                           
   586                           ;main.c: 181:             _delay((unsigned long)((30)*(1000000/4000.0)));
   587     0764  300A               	movlw	10
   588     0765  00FC               	movwf	??_main
   589     0766  30BC               	movlw	188
   590     0767                     u657:
   591     0767  0B89               	decfsz	9,f
   592     0768  2F67               	goto	u657
   593     0769  0BFC               	decfsz	??_main,f
   594     076A  2F67               	goto	u657
   595     076B  3200               	nop2
   596     076C                     l849:
   597                           
   598                           ;main.c: 182:             if (PORTCbits.RC5 == 0) {
   599     076C  0140               	movlb	0	; select bank0
   600     076D  1A8E               	btfsc	14,5	;volatile
   601     076E  2F70               	goto	u451
   602     076F  2F71               	goto	u450
   603     0770                     u451:
   604     0770  2F8B               	goto	l86
   605     0771                     u450:
   606     0771                     l851:
   607                           
   608                           ;main.c: 183:                 current_color = !current_color;
   609     0771  087D               	movf	_current_color,w
   610     0772  1903               	btfsc	3,2
   611     0773  2F75               	goto	u461
   612     0774  2F77               	goto	u460
   613     0775                     u461:
   614     0775  3001               	movlw	1
   615     0776  2F78               	goto	u470
   616     0777                     u460:
   617     0777  3000               	movlw	0
   618     0778                     u470:
   619     0778  00FD               	movwf	_current_color
   620                           
   621                           ;main.c: 184:                 LATCbits.LATC1 = !current_color;
   622     0779  087D               	movf	_current_color,w
   623     077A  1903               	btfsc	3,2
   624     077B  2F7D               	goto	u481
   625     077C  2F80               	goto	u480
   626     077D                     u481:
   627     077D  0140               	movlb	0	; select bank0
   628     077E  149A               	bsf	26,1	;volatile
   629     077F  2F82               	goto	u494
   630     0780                     u480:
   631     0780  0140               	movlb	0	; select bank0
   632     0781  109A               	bcf	26,1	;volatile
   633     0782                     u494:
   634     0782                     l853:
   635                           
   636                           ;main.c: 185:                 LATCbits.LATC2 = current_color;
   637     0782  0C7D               	rrf	_current_color,w
   638     0783  1C03               	skipc
   639     0784  111A               	bcf	26,2	;volatile
   640     0785  1803               	skipnc
   641     0786  151A               	bsf	26,2	;volatile
   642     0787                     l88:	
   643                           ;main.c: 186:                 while (PORTCbits.RC5 == 0);
   644                           
   645     0787  1E8E               	btfss	14,5	;volatile
   646     0788  2F8A               	goto	u501
   647     0789  2F8B               	goto	u500
   648     078A                     u501:
   649     078A  2F87               	goto	l88
   650     078B                     u500:
   651     078B                     l86:	
   652                           ;main.c: 188:         }
   653                           
   654                           
   655                           ;main.c: 191:         if (PORTCbits.RC0 == 0) {
   656     078B  180E               	btfsc	14,0	;volatile
   657     078C  2F8E               	goto	u511
   658     078D  2F8F               	goto	u510
   659     078E                     u511:
   660     078E  2FBB               	goto	l91
   661     078F                     u510:
   662     078F                     l855:
   663                           
   664                           ;main.c: 192:             _delay((unsigned long)((30)*(1000000/4000.0)));
   665     078F  300A               	movlw	10
   666     0790  00FC               	movwf	??_main
   667     0791  30BC               	movlw	188
   668     0792                     u667:
   669     0792  0B89               	decfsz	9,f
   670     0793  2F92               	goto	u667
   671     0794  0BFC               	decfsz	??_main,f
   672     0795  2F92               	goto	u667
   673     0796  3200               	nop2
   674     0797                     l857:
   675                           
   676                           ;main.c: 193:             if (PORTCbits.RC0 == 0) {
   677     0797  0140               	movlb	0	; select bank0
   678     0798  180E               	btfsc	14,0	;volatile
   679     0799  2F9B               	goto	u521
   680     079A  2F9C               	goto	u520
   681     079B                     u521:
   682     079B  2FBB               	goto	l91
   683     079C                     u520:
   684     079C                     l859:
   685                           
   686                           ;main.c: 194:                 if (current_color == 0 && red_level < 5) {
   687     079C  087D               	movf	_current_color,w
   688     079D  1D03               	btfss	3,2
   689     079E  2FA0               	goto	u531
   690     079F  2FA1               	goto	u530
   691     07A0                     u531:
   692     07A0  2FAA               	goto	l865
   693     07A1                     u530:
   694     07A1                     l861:
   695     07A1  3005               	movlw	5
   696     07A2  0221               	subwf	_red_level,w
   697     07A3  1803               	skipnc
   698     07A4  2FA6               	goto	u541
   699     07A5  2FA7               	goto	u540
   700     07A6                     u541:
   701     07A6  2FAA               	goto	l865
   702     07A7                     u540:
   703     07A7                     l863:
   704                           
   705                           ;main.c: 195:                     red_level++;
   706     07A7  3001               	movlw	1
   707     07A8  07A1               	addwf	_red_level,f
   708                           
   709                           ;main.c: 196:                 } else if (current_color == 1 && orange_level < 5) {
   710     07A9  2FB7               	goto	l96
   711     07AA                     l865:
   712     07AA  037D               	decf	_current_color,w
   713     07AB  1D03               	btfss	3,2
   714     07AC  2FAE               	goto	u551
   715     07AD  2FAF               	goto	u550
   716     07AE                     u551:
   717     07AE  2FB7               	goto	l96
   718     07AF                     u550:
   719     07AF                     l867:
   720     07AF  3005               	movlw	5
   721     07B0  0220               	subwf	_orange_level,w
   722     07B1  1803               	skipnc
   723     07B2  2FB4               	goto	u561
   724     07B3  2FB5               	goto	u560
   725     07B4                     u561:
   726     07B4  2FB7               	goto	l96
   727     07B5                     u560:
   728     07B5                     l869:
   729                           
   730                           ;main.c: 197:                     orange_level++;
   731     07B5  3001               	movlw	1
   732     07B6  07A0               	addwf	_orange_level,f
   733     07B7                     l96:
   734     07B7  1C0E               	btfss	14,0	;volatile
   735     07B8  2FBA               	goto	u571
   736     07B9  2FBB               	goto	u570
   737     07BA                     u571:
   738     07BA  2FB7               	goto	l96
   739     07BB                     u570:
   740     07BB                     l91:	
   741                           ;main.c: 201:         }
   742                           
   743                           
   744                           ;main.c: 204:         if (PORTAbits.RA2 == 0) {
   745     07BB  190C               	btfsc	12,2	;volatile
   746     07BC  2FBE               	goto	u581
   747     07BD  2FBF               	goto	u580
   748     07BE                     u581:
   749     07BE  2FE9               	goto	l887
   750     07BF                     u580:
   751     07BF                     l871:
   752                           
   753                           ;main.c: 205:             _delay((unsigned long)((30)*(1000000/4000.0)));
   754     07BF  300A               	movlw	10
   755     07C0  00FC               	movwf	??_main
   756     07C1  30BC               	movlw	188
   757     07C2                     u677:
   758     07C2  0B89               	decfsz	9,f
   759     07C3  2FC2               	goto	u677
   760     07C4  0BFC               	decfsz	??_main,f
   761     07C5  2FC2               	goto	u677
   762     07C6  3200               	nop2
   763     07C7                     l873:
   764                           
   765                           ;main.c: 206:             if (PORTAbits.RA2 == 0) {
   766     07C7  0140               	movlb	0	; select bank0
   767     07C8  190C               	btfsc	12,2	;volatile
   768     07C9  2FCB               	goto	u591
   769     07CA  2FCC               	goto	u590
   770     07CB                     u591:
   771     07CB  2FE9               	goto	l887
   772     07CC                     u590:
   773     07CC                     l875:
   774                           
   775                           ;main.c: 207:                 if (current_color == 0 && red_level > 0) {
   776     07CC  087D               	movf	_current_color,w
   777     07CD  1D03               	btfss	3,2
   778     07CE  2FD0               	goto	u601
   779     07CF  2FD1               	goto	u600
   780     07D0                     u601:
   781     07D0  2FD9               	goto	l881
   782     07D1                     u600:
   783     07D1                     l877:
   784     07D1  0821               	movf	_red_level,w
   785     07D2  1903               	btfsc	3,2
   786     07D3  2FD5               	goto	u611
   787     07D4  2FD6               	goto	u610
   788     07D5                     u611:
   789     07D5  2FD9               	goto	l881
   790     07D6                     u610:
   791     07D6                     l879:
   792                           
   793                           ;main.c: 208:                     red_level--;
   794     07D6  3001               	movlw	1
   795     07D7  02A1               	subwf	_red_level,f
   796                           
   797                           ;main.c: 209:                 } else if (current_color == 1 && orange_level > 0) {
   798     07D8  2FE5               	goto	l104
   799     07D9                     l881:
   800     07D9  037D               	decf	_current_color,w
   801     07DA  1D03               	btfss	3,2
   802     07DB  2FDD               	goto	u621
   803     07DC  2FDE               	goto	u620
   804     07DD                     u621:
   805     07DD  2FE5               	goto	l104
   806     07DE                     u620:
   807     07DE                     l883:
   808     07DE  0820               	movf	_orange_level,w
   809     07DF  1903               	btfsc	3,2
   810     07E0  2FE2               	goto	u631
   811     07E1  2FE3               	goto	u630
   812     07E2                     u631:
   813     07E2  2FE5               	goto	l104
   814     07E3                     u630:
   815     07E3                     l885:
   816                           
   817                           ;main.c: 210:                     orange_level--;
   818     07E3  3001               	movlw	1
   819     07E4  02A0               	subwf	_orange_level,f
   820     07E5                     l104:
   821     07E5  1D0C               	btfss	12,2	;volatile
   822     07E6  2FE8               	goto	u641
   823     07E7  2FE9               	goto	u640
   824     07E8                     u641:
   825     07E8  2FE5               	goto	l104
   826     07E9                     u640:
   827     07E9                     l887:
   828                           
   829                           ;main.c: 216:         update_leds();
   830     07E9  3186  2684  3187   	fcall	_update_leds
   831     07EC                     l889:
   832                           
   833                           ;main.c: 217:         _delay((unsigned long)((10)*(1000000/4000.0)));
   834     07EC  3004               	movlw	4
   835     07ED  00FC               	movwf	??_main
   836     07EE  303E               	movlw	62
   837     07EF                     u687:
   838     07EF  0B89               	decfsz	9,f
   839     07F0  2FEF               	goto	u687
   840     07F1  0BFC               	decfsz	??_main,f
   841     07F2  2FEF               	goto	u687
   842     07F3  2F5F               	goto	l845
   843     07F4  2801               	ljmp	start
   844     07F5                     __end_of_main:
   845                           
   846                           	psect	text1
   847     0684                     __ptext1:	
   848 ;; *************** function _update_leds *****************
   849 ;; Defined at:
   850 ;;		line 156 in file "main.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;		None
   853 ;; Auto vars:     Size  Location     Type
   854 ;;		None
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, status,2, status,0, pclath, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   864 ;;      Params:         0       0       0       0
   865 ;;      Locals:         0       0       0       0
   866 ;;      Temps:          0       0       0       0
   867 ;;      Totals:         0       0       0       0
   868 ;;Total ram usage:        0 bytes
   869 ;; Hardware stack levels used: 1
   870 ;; Hardware stack levels required when called: 2
   871 ;; This function calls:
   872 ;;		_set_pwm_duty
   873 ;; This function is called by:
   874 ;;		_main
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878     0684                     _update_leds:	
   879                           ;psect for function _update_leds
   880                           
   881     0684                     l817:	
   882                           ;incstack = 0
   883                           ; Regs used in _update_leds: [wreg+status,2+status,0+pclath+cstack]
   884                           
   885                           
   886                           ;main.c: 157:     if (current_color == 0) {
   887     0684  087D               	movf	_current_color,w
   888     0685  1D03               	btfss	3,2
   889     0686  2E88               	goto	u421
   890     0687  2E89               	goto	u420
   891     0688                     u421:
   892     0688  2E91               	goto	l821
   893     0689                     u420:
   894     0689                     l819:
   895                           
   896                           ;main.c: 158:         set_pwm_duty(3, red_level);
   897     0689  0140               	movlb	0	; select bank0
   898     068A  0821               	movf	_red_level,w
   899     068B  00F6               	movwf	set_pwm_duty@level
   900     068C  3003               	movlw	3
   901     068D  3186  26F5  3186   	fcall	_set_pwm_duty
   902                           
   903                           ;main.c: 159:     } else if (current_color == 1){
   904     0690  2E9D               	goto	l80
   905     0691                     l821:
   906     0691  037D               	decf	_current_color,w
   907     0692  1D03               	btfss	3,2
   908     0693  2E95               	goto	u431
   909     0694  2E96               	goto	u430
   910     0695                     u431:
   911     0695  2E9D               	goto	l80
   912     0696                     u430:
   913     0696                     l823:
   914                           
   915                           ;main.c: 160:         set_pwm_duty(4, orange_level);
   916     0696  0140               	movlb	0	; select bank0
   917     0697  0820               	movf	_orange_level,w
   918     0698  00F6               	movwf	set_pwm_duty@level
   919     0699  3004               	movlw	4
   920     069A  3186  26F5  3186   	fcall	_set_pwm_duty
   921     069D                     l80:
   922     069D  0008               	return
   923     069E                     __end_of_update_leds:
   924                           
   925                           	psect	text2
   926     06F5                     __ptext2:	
   927 ;; *************** function _set_pwm_duty *****************
   928 ;; Defined at:
   929 ;;		line 137 in file "main.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;  pwm             1    wreg     unsigned char 
   932 ;;  level           1    6[COMMON] unsigned char 
   933 ;; Auto vars:     Size  Location     Type
   934 ;;  pwm             1    9[COMMON] unsigned char 
   935 ;;  duty            2   10[COMMON] unsigned short 
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg, status,2, status,0, pclath, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   945 ;;      Params:         1       0       0       0
   946 ;;      Locals:         3       0       0       0
   947 ;;      Temps:          2       0       0       0
   948 ;;      Totals:         6       0       0       0
   949 ;;Total ram usage:        6 bytes
   950 ;; Hardware stack levels used: 1
   951 ;; Hardware stack levels required when called: 1
   952 ;; This function calls:
   953 ;;		___wmul
   954 ;; This function is called by:
   955 ;;		_update_leds
   956 ;; This function uses a non-reentrant model
   957 ;;
   958                           
   959     06F5                     _set_pwm_duty:	
   960                           ;psect for function _set_pwm_duty
   961                           
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _set_pwm_duty: [wreg+status,2+status,0+pclath+cstack]
   965                           ;set_pwm_duty@pwm stored from wreg
   966     06F5  00F9               	movwf	set_pwm_duty@pwm
   967     06F6                     l777:
   968                           
   969                           ;main.c: 138:     uint16_t duty;;main.c: 141:     if (level == 0) {
   970     06F6  0876               	movf	set_pwm_duty@level,w
   971     06F7  1D03               	btfss	3,2
   972     06F8  2EFA               	goto	u371
   973     06F9  2EFB               	goto	u370
   974     06FA                     u371:
   975     06FA  2EFE               	goto	l781
   976     06FB                     u370:
   977     06FB                     l779:
   978                           
   979                           ;main.c: 142:         duty = 0;
   980     06FB  01FA               	clrf	set_pwm_duty@duty
   981     06FC  01FB               	clrf	set_pwm_duty@duty+1
   982                           
   983                           ;main.c: 143:     } else {
   984     06FD  2F10               	goto	l783
   985     06FE                     l781:
   986                           
   987                           ;main.c: 144:         duty = (level * 51);
   988     06FE  0876               	movf	set_pwm_duty@level,w
   989     06FF  00F7               	movwf	??_set_pwm_duty
   990     0700  01F8               	clrf	??_set_pwm_duty+1
   991     0701  0877               	movf	??_set_pwm_duty,w
   992     0702  00F0               	movwf	___wmul@multiplier
   993     0703  0878               	movf	??_set_pwm_duty+1,w
   994     0704  00F1               	movwf	___wmul@multiplier+1
   995     0705  3033               	movlw	51
   996     0706  00F2               	movwf	___wmul@multiplicand
   997     0707  3000               	movlw	0
   998     0708  00F3               	movwf	___wmul@multiplicand+1
   999     0709  3186  269E  3186   	fcall	___wmul
  1000     070C  0871               	movf	?___wmul+1,w
  1001     070D  00FB               	movwf	set_pwm_duty@duty+1
  1002     070E  0870               	movf	?___wmul,w
  1003     070F  00FA               	movwf	set_pwm_duty@duty
  1004     0710                     l783:
  1005                           
  1006                           ;main.c: 147:     if (pwm == 3) {
  1007     0710  3003               	movlw	3
  1008     0711  0679               	xorwf	set_pwm_duty@pwm,w
  1009     0712  1D03               	btfss	3,2
  1010     0713  2F15               	goto	u381
  1011     0714  2F16               	goto	u380
  1012     0715                     u381:
  1013     0715  2F2B               	goto	l787
  1014     0716                     u380:
  1015     0716                     l785:
  1016                           
  1017                           ;main.c: 148:         PWM3DCH = duty >> 2;
  1018     0716  087B               	movf	set_pwm_duty@duty+1,w
  1019     0717  00F8               	movwf	??_set_pwm_duty+1
  1020     0718  087A               	movf	set_pwm_duty@duty,w
  1021     0719  00F7               	movwf	??_set_pwm_duty
  1022     071A  36F8               	lsrf	??_set_pwm_duty+1,f
  1023     071B  0CF7               	rrf	??_set_pwm_duty,f
  1024     071C  36F8               	lsrf	??_set_pwm_duty+1,f
  1025     071D  0CF7               	rrf	??_set_pwm_duty,f
  1026     071E  0877               	movf	??_set_pwm_duty,w
  1027     071F  0146               	movlb	6	; select bank6
  1028     0720  0095               	movwf	21	;volatile
  1029                           
  1030                           ;main.c: 149:         PWM3DCL = (duty & 0x03) << 6;
  1031     0721  087A               	movf	set_pwm_duty@duty,w
  1032     0722  3903               	andlw	3
  1033     0723  00F7               	movwf	??_set_pwm_duty
  1034     0724  3006               	movlw	6
  1035     0725                     u395:
  1036     0725  35F7               	lslf	??_set_pwm_duty,f
  1037     0726  0B89               	decfsz	9,f
  1038     0727  2F25               	goto	u395
  1039     0728  0877               	movf	??_set_pwm_duty,w
  1040     0729  0094               	movwf	20	;volatile
  1041                           
  1042                           ;main.c: 150:     } else if (pwm == 4) {
  1043     072A  2F45               	goto	l74
  1044     072B                     l787:
  1045     072B  3004               	movlw	4
  1046     072C  0679               	xorwf	set_pwm_duty@pwm,w
  1047     072D  1D03               	btfss	3,2
  1048     072E  2F30               	goto	u401
  1049     072F  2F31               	goto	u400
  1050     0730                     u401:
  1051     0730  2F45               	goto	l74
  1052     0731                     u400:
  1053     0731                     l789:
  1054                           
  1055                           ;main.c: 151:         PWM4DCH = duty >> 2;
  1056     0731  087B               	movf	set_pwm_duty@duty+1,w
  1057     0732  00F8               	movwf	??_set_pwm_duty+1
  1058     0733  087A               	movf	set_pwm_duty@duty,w
  1059     0734  00F7               	movwf	??_set_pwm_duty
  1060     0735  36F8               	lsrf	??_set_pwm_duty+1,f
  1061     0736  0CF7               	rrf	??_set_pwm_duty,f
  1062     0737  36F8               	lsrf	??_set_pwm_duty+1,f
  1063     0738  0CF7               	rrf	??_set_pwm_duty,f
  1064     0739  0877               	movf	??_set_pwm_duty,w
  1065     073A  0146               	movlb	6	; select bank6
  1066     073B  0099               	movwf	25	;volatile
  1067                           
  1068                           ;main.c: 152:         PWM4DCL = (duty & 0x03) << 6;
  1069     073C  087A               	movf	set_pwm_duty@duty,w
  1070     073D  3903               	andlw	3
  1071     073E  00F7               	movwf	??_set_pwm_duty
  1072     073F  3006               	movlw	6
  1073     0740                     u415:
  1074     0740  35F7               	lslf	??_set_pwm_duty,f
  1075     0741  0B89               	decfsz	9,f
  1076     0742  2F40               	goto	u415
  1077     0743  0877               	movf	??_set_pwm_duty,w
  1078     0744  0098               	movwf	24	;volatile
  1079     0745                     l74:
  1080     0745  0008               	return
  1081     0746                     __end_of_set_pwm_duty:
  1082                           
  1083                           	psect	text3
  1084     069E                     __ptext3:	
  1085 ;; *************** function ___wmul *****************
  1086 ;; Defined at:
  1087 ;;		line 15 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/Umul16.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  multiplier      2    0[COMMON] unsigned int 
  1090 ;;  multiplicand    2    2[COMMON] unsigned int 
  1091 ;; Auto vars:     Size  Location     Type
  1092 ;;  product         2    4[COMMON] unsigned int 
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  2    0[COMMON] unsigned int 
  1095 ;; Registers used:
  1096 ;;		wreg, status,2, status,0
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1102 ;;      Params:         4       0       0       0
  1103 ;;      Locals:         2       0       0       0
  1104 ;;      Temps:          0       0       0       0
  1105 ;;      Totals:         6       0       0       0
  1106 ;;Total ram usage:        6 bytes
  1107 ;; Hardware stack levels used: 1
  1108 ;; This function calls:
  1109 ;;		Nothing
  1110 ;; This function is called by:
  1111 ;;		_set_pwm_duty
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115     069E                     ___wmul:	
  1116                           ;psect for function ___wmul
  1117                           
  1118     069E                     l763:	
  1119                           ;incstack = 0
  1120                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1121                           
  1122     069E  01F4               	clrf	___wmul@product
  1123     069F  01F5               	clrf	___wmul@product+1
  1124     06A0                     l765:
  1125     06A0  1C70               	btfss	___wmul@multiplier,0
  1126     06A1  2EA3               	goto	u331
  1127     06A2  2EA4               	goto	u330
  1128     06A3                     u331:
  1129     06A3  2EA8               	goto	l177
  1130     06A4                     u330:
  1131     06A4                     l767:
  1132     06A4  0872               	movf	___wmul@multiplicand,w
  1133     06A5  07F4               	addwf	___wmul@product,f
  1134     06A6  0873               	movf	___wmul@multiplicand+1,w
  1135     06A7  3DF5               	addwfc	___wmul@product+1,f
  1136     06A8                     l177:
  1137     06A8  3001               	movlw	1
  1138     06A9                     u345:
  1139     06A9  35F2               	lslf	___wmul@multiplicand,f
  1140     06AA  0DF3               	rlf	___wmul@multiplicand+1,f
  1141     06AB  0B89               	decfsz	9,f
  1142     06AC  2EA9               	goto	u345
  1143     06AD                     l769:
  1144     06AD  3001               	movlw	1
  1145     06AE                     u355:
  1146     06AE  36F1               	lsrf	___wmul@multiplier+1,f
  1147     06AF  0CF0               	rrf	___wmul@multiplier,f
  1148     06B0  0B89               	decfsz	9,f
  1149     06B1  2EAE               	goto	u355
  1150     06B2                     l771:
  1151     06B2  0870               	movf	___wmul@multiplier,w
  1152     06B3  0471               	iorwf	___wmul@multiplier+1,w
  1153     06B4  1D03               	btfss	3,2
  1154     06B5  2EB7               	goto	u361
  1155     06B6  2EB8               	goto	u360
  1156     06B7                     u361:
  1157     06B7  2EA0               	goto	l765
  1158     06B8                     u360:
  1159     06B8                     l773:
  1160     06B8  0875               	movf	___wmul@product+1,w
  1161     06B9  00F1               	movwf	?___wmul+1
  1162     06BA  0874               	movf	___wmul@product,w
  1163     06BB  00F0               	movwf	?___wmul
  1164     06BC                     l179:
  1165     06BC  0008               	return
  1166     06BD                     __end_of___wmul:
  1167                           
  1168                           	psect	text4
  1169     06BD                     __ptext4:	
  1170 ;; *************** function _initialize *****************
  1171 ;; Defined at:
  1172 ;;		line 59 in file "main.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;		None
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;		None
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		status,2
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1186 ;;      Params:         0       0       0       0
  1187 ;;      Locals:         0       0       0       0
  1188 ;;      Temps:          0       0       0       0
  1189 ;;      Totals:         0       0       0       0
  1190 ;;Total ram usage:        0 bytes
  1191 ;; Hardware stack levels used: 1
  1192 ;; This function calls:
  1193 ;;		Nothing
  1194 ;; This function is called by:
  1195 ;;		_main
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199     06BD                     _initialize:	
  1200                           ;psect for function _initialize
  1201                           
  1202     06BD                     l791:	
  1203                           ;incstack = 0
  1204                           ; Regs used in _initialize: [status,2]
  1205                           
  1206                           
  1207                           ;main.c: 62:     PPSLOCK = 0x55;
  1208     06BD  3055               	movlw	85
  1209     06BE  017D               	movlb	61	; select bank61
  1210     06BF  008F               	movwf	15	;volsfr
  1211                           
  1212                           ;main.c: 63:     PPSLOCK = 0xAA;
  1213     06C0  30AA               	movlw	170
  1214     06C1  008F               	movwf	15	;volsfr
  1215                           
  1216                           ;main.c: 64:     PPSLOCKbits.PPSLOCKED = 0;
  1217     06C2  100F               	bcf	15,0	;volsfr
  1218                           
  1219                           ;main.c: 67:     RC3PPS = 0x0B;
  1220     06C3  300B               	movlw	11
  1221     06C4  017E               	movlb	62	; select bank62
  1222     06C5  00A3               	movwf	35	;volatile
  1223                           
  1224                           ;main.c: 68:     RC4PPS = 0x0C;
  1225     06C6  300C               	movlw	12
  1226     06C7  00A4               	movwf	36	;volatile
  1227                           
  1228                           ;main.c: 71:     PPSLOCK = 0x55;
  1229     06C8  3055               	movlw	85
  1230     06C9  017D               	movlb	61	; select bank61
  1231     06CA  008F               	movwf	15	;volsfr
  1232                           
  1233                           ;main.c: 72:     PPSLOCK = 0xAA;
  1234     06CB  30AA               	movlw	170
  1235     06CC  008F               	movwf	15	;volsfr
  1236                           
  1237                           ;main.c: 73:     PPSLOCKbits.PPSLOCKED = 1;
  1238     06CD  140F               	bsf	15,0	;volsfr
  1239                           
  1240                           ;main.c: 76:     TRISCbits.TRISC5 = 1;
  1241     06CE  0140               	movlb	0	; select bank0
  1242     06CF  1694               	bsf	20,5	;volatile
  1243                           
  1244                           ;main.c: 77:     TRISCbits.TRISC0 = 1;
  1245     06D0  1414               	bsf	20,0	;volatile
  1246                           
  1247                           ;main.c: 78:     TRISAbits.TRISA2 = 1;
  1248     06D1  1512               	bsf	18,2	;volatile
  1249                           
  1250                           ;main.c: 81:     TRISCbits.TRISC1 = 0;
  1251     06D2  1094               	bcf	20,1	;volatile
  1252                           
  1253                           ;main.c: 82:     TRISCbits.TRISC2 = 0;
  1254     06D3  1114               	bcf	20,2	;volatile
  1255                           
  1256                           ;main.c: 84:     TRISCbits.TRISC3 = 0;
  1257     06D4  1194               	bcf	20,3	;volatile
  1258                           
  1259                           ;main.c: 85:     TRISCbits.TRISC4 = 0;
  1260     06D5  1214               	bcf	20,4	;volatile
  1261                           
  1262                           ;main.c: 88:     ANSELAbits.ANSA2 = 0;
  1263     06D6  017E               	movlb	62	; select bank62
  1264     06D7  1138               	bcf	56,2	;volatile
  1265                           
  1266                           ;main.c: 89:     ANSELCbits.ANSC0 = 0;
  1267     06D8  104E               	bcf	78,0	;volatile
  1268                           
  1269                           ;main.c: 90:     ANSELCbits.ANSC5 = 0;
  1270     06D9  12CE               	bcf	78,5	;volatile
  1271                           
  1272                           ;main.c: 93:     WPUAbits.WPUA2 = 1;
  1273     06DA  1539               	bsf	57,2	;volatile
  1274                           
  1275                           ;main.c: 94:     WPUCbits.WPUC0 = 1;
  1276     06DB  144F               	bsf	79,0	;volatile
  1277                           
  1278                           ;main.c: 95:     WPUCbits.WPUC5 = 1;
  1279     06DC  16CF               	bsf	79,5	;volatile
  1280                           
  1281                           ;main.c: 100:     PWM3CON = 0b10000000;
  1282     06DD  3080               	movlw	128
  1283     06DE  0146               	movlb	6	; select bank6
  1284     06DF  0096               	movwf	22	;volatile
  1285     06E0                     l793:
  1286                           
  1287                           ;main.c: 101:     PWM3DCH = 0;
  1288     06E0  0195               	clrf	21	;volatile
  1289                           
  1290                           ;main.c: 102:     PWM3DCL = 0;
  1291     06E1  0194               	clrf	20	;volatile
  1292     06E2                     l795:
  1293                           
  1294                           ;main.c: 105:     PWM4CON = 0b10000000;
  1295     06E2  3080               	movlw	128
  1296     06E3  009A               	movwf	26	;volatile
  1297                           
  1298                           ;main.c: 106:     PWM4DCH = 0;
  1299     06E4  0199               	clrf	25	;volatile
  1300                           
  1301                           ;main.c: 107:     PWM4DCL = 0;
  1302     06E5  0198               	clrf	24	;volatile
  1303     06E6                     l797:
  1304                           
  1305                           ;main.c: 110:     T2CON = 0x40;
  1306     06E6  3040               	movlw	64
  1307     06E7  0145               	movlb	5	; select bank5
  1308     06E8  008E               	movwf	14	;volatile
  1309     06E9                     l799:
  1310                           
  1311                           ;main.c: 111:     T2CLKCON = 0x01;
  1312     06E9  3001               	movlw	1
  1313     06EA  0090               	movwf	16	;volatile
  1314                           
  1315                           ;main.c: 112:     T2HLT = 0x00;
  1316     06EB  018F               	clrf	15	;volatile
  1317                           
  1318                           ;main.c: 113:     T2RST = 0x00;
  1319     06EC  0191               	clrf	17	;volatile
  1320     06ED                     l801:
  1321                           
  1322                           ;main.c: 114:     T2PR = 0xFF;
  1323     06ED  30FF               	movlw	255
  1324     06EE  008D               	movwf	13	;volatile
  1325                           
  1326                           ;main.c: 115:     T2TMR = 0x00;
  1327     06EF  018C               	clrf	12	;volatile
  1328     06F0                     l803:
  1329                           
  1330                           ;main.c: 116:     T2CONbits.TMR2ON = 1;
  1331     06F0  178E               	bsf	14,7	;volatile
  1332     06F1                     l805:
  1333                           
  1334                           ;main.c: 119:     LATCbits.LATC1 = 0;
  1335     06F1  0140               	movlb	0	; select bank0
  1336     06F2  109A               	bcf	26,1	;volatile
  1337     06F3                     l807:
  1338                           
  1339                           ;main.c: 120:     LATCbits.LATC2 = 0;
  1340     06F3  111A               	bcf	26,2	;volatile
  1341     06F4                     l63:
  1342     06F4  0008               	return
  1343     06F5                     __end_of_initialize:
  1344                           
  1345                           	psect	text5
  1346     066D                     __ptext5:	
  1347 ;; *************** function _blink *****************
  1348 ;; Defined at:
  1349 ;;		line 123 in file "main.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;		None
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;		None
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1363 ;;      Params:         0       0       0       0
  1364 ;;      Locals:         0       0       0       0
  1365 ;;      Temps:          1       0       0       0
  1366 ;;      Totals:         1       0       0       0
  1367 ;;Total ram usage:        1 bytes
  1368 ;; Hardware stack levels used: 1
  1369 ;; This function calls:
  1370 ;;		Nothing
  1371 ;; This function is called by:
  1372 ;;		_main
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376     066D                     _blink:	
  1377                           ;psect for function _blink
  1378                           
  1379     066D                     l809:	
  1380                           ;incstack = 0
  1381                           ; Regs used in _blink: [wreg]
  1382                           
  1383                           
  1384                           ;main.c: 126:     LATCbits.LATC1 = 1;
  1385     066D  0140               	movlb	0	; select bank0
  1386     066E  149A               	bsf	26,1	;volatile
  1387                           
  1388                           ;main.c: 127:     LATCbits.LATC2 = 1;
  1389     066F  151A               	bsf	26,2	;volatile
  1390     0670                     l811:
  1391                           
  1392                           ;main.c: 128:     _delay((unsigned long)((200)*(1000000/4000.0)));
  1393     0670  3041               	movlw	65
  1394     0671  00F0               	movwf	??_blink
  1395     0672  30EE               	movlw	238
  1396     0673                     u697:
  1397     0673  0B89               	decfsz	9,f
  1398     0674  2E73               	goto	u697
  1399     0675  0BF0               	decfsz	??_blink,f
  1400     0676  2E73               	goto	u697
  1401     0677  3200               	nop2
  1402     0678                     l813:
  1403                           
  1404                           ;main.c: 131:     LATCbits.LATC1 = 0;
  1405     0678  0140               	movlb	0	; select bank0
  1406     0679  109A               	bcf	26,1	;volatile
  1407     067A                     l815:
  1408                           
  1409                           ;main.c: 132:     LATCbits.LATC2 = 0;
  1410     067A  111A               	bcf	26,2	;volatile
  1411                           
  1412                           ;main.c: 133:     _delay((unsigned long)((200)*(1000000/4000.0)));
  1413     067B  3041               	movlw	65
  1414     067C  00F0               	movwf	??_blink
  1415     067D  30EE               	movlw	238
  1416     067E                     u707:
  1417     067E  0B89               	decfsz	9,f
  1418     067F  2E7E               	goto	u707
  1419     0680  0BF0               	decfsz	??_blink,f
  1420     0681  2E7E               	goto	u707
  1421     0682  3200               	nop2
  1422     0683                     l66:
  1423     0683  0008               	return
  1424     0684                     __end_of_blink:
  1425     0000                     ___latbits      equ	0
  1426     007E                     btemp           set	126	;btemp
  1427     007E                     wtemp0          set	126
  1428                           
  1429                           	psect	config
  1430                           
  1431                           ;Config register CONFIG1 @ 0x8007
  1432                           ;	External Oscillator mode selection bits
  1433                           ;	FEXTOSC = OFF, Oscillator not enabled
  1434                           ;	Power-up default value for COSC bits
  1435                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
  1436                           ;	Clock Out Enable bit
  1437                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
  1438                           ;	Clock Switch Enable bit
  1439                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  1440                           ;	Fail-Safe Clock Monitor Enable bit
  1441                           ;	FCMEN = ON, FSCM timer enabled
  1442     8007                     	org	32775
  1443     8007  3FEC               	dw	16364
  1444                           
  1445                           ;Config register CONFIG2 @ 0x8008
  1446                           ;	Master Clear Enable bit
  1447                           ;	MCLRE = ON, MCLR pin is Master Clear function
  1448                           ;	Power-up Timer Enable bit
  1449                           ;	PWRTE = OFF, PWRT disabled
  1450                           ;	Low-Power BOR enable bit
  1451                           ;	LPBOREN = OFF, ULPBOR disabled
  1452                           ;	Brown-out reset enable bits
  1453                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
  1454                           ;	Brown-out Reset Voltage Selection
  1455                           ;	BORV = 0x1, unprogrammed default
  1456                           ;	Zero-cross detect disable
  1457                           ;	ZCD = 0x1, unprogrammed default
  1458                           ;	Peripheral Pin Select one-way control
  1459                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
  1460                           ;	Stack Overflow/Underflow Reset Enable bit
  1461                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
  1462     8008                     	org	32776
  1463     8008  3FFF               	dw	16383
  1464                           
  1465                           ;Config register CONFIG3 @ 0x8009
  1466                           ;	WDT Period Select bits
  1467                           ;	WDTCPS = 0x1F, unprogrammed default
  1468                           ;	WDT operating mode
  1469                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
  1470                           ;	WDT Window Select bits
  1471                           ;	WDTCWS = 0x7, unprogrammed default
  1472                           ;	WDT input clock selector
  1473                           ;	WDTCCS = 0x7, unprogrammed default
  1474     8009                     	org	32777
  1475     8009  3F9F               	dw	16287

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         1
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      0       2
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _update_leds->_set_pwm_duty
    _set_pwm_duty->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     288
                                             12 COMMON     1     1      0
                              _blink
                         _initialize
                        _update_leds
 ---------------------------------------------------------------------------------
 (1) _update_leds                                          0     0      0     288
                       _set_pwm_duty
 ---------------------------------------------------------------------------------
 (2) _set_pwm_duty                                         6     5      1     288
                                              6 COMMON     6     5      1
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      94
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _blink                                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink
   _initialize
   _update_leds
     _set_pwm_duty
       ___wmul

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BIGRAM             240      0       0      0.0%
COMMON              14     13      14    100.0%
BANK0               80      0       2      2.5%
BANK1               80      0       0      0.0%
BANK2               80      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      16      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Oct 10 11:23:56 2024

            _update_leds 0684                       l63 06F4                       l80 069D  
                     l66 0683                       l74 0745                       l91 07BB  
                     l86 078B                       l96 07B7                       l88 0787  
    ___wmul@multiplicand 0072                      l104 07E5                      l177 06A8  
                    l179 06BC                      l801 06ED                      l811 0670  
                    l803 06F0                      l813 0678                      l805 06F1  
                    l821 0691                      l815 067A                      l807 06F3  
                    l823 0696                      l831 074F                      l809 066D  
                    l817 0684                      l841 075B                      l833 0752  
                    l825 0746                      l771 06B2                      l763 069E  
                    l819 0689                      l851 0771                      l843 075D  
                    l835 0754                      l827 0749                      l773 06B8  
                    l765 06A0                      l781 06FE                      l861 07A1  
                    l853 0782                      l845 075F                      l837 0757  
                    l829 074C                      l791 06BD                      l767 06A4  
                    l783 0710                      l871 07BF                      l863 07A7  
                    l855 078F                      l847 0764                      l839 0758  
                    l793 06E0                      l769 06AD                      l785 0716  
                    l777 06F6                      l881 07D9                      l873 07C7  
                    l865 07AA                      l857 0797                      l849 076C  
                    l795 06E2                      l787 072B                      l779 06FB  
                    l883 07DE                      l875 07CC                      l867 07AF  
                    l859 079C                      l797 06E6                      l789 0731  
                    l885 07E3                      l877 07D1                      l869 07B5  
                    l799 06E9                      l879 07D6                      l887 07E9  
                    l889 07EC                      u400 0731                      u401 0730  
                    u330 06A4                      u331 06A3                      u420 0689  
                    u500 078B                      u421 0688                      u501 078A  
                    u430 0696                      u510 078F                      u415 0740  
                    u431 0695                      u511 078E                      u360 06B8  
                    u600 07D1                      u520 079C                      u440 0764  
                    u361 06B7                      u345 06A9                      u601 07D0  
                    u521 079B                      u441 0763                      u370 06FB  
                    u610 07D6                      u530 07A1                      u450 0771  
                    u355 06AE                      u371 06FA                      u611 07D5  
                    u531 07A0                      u451 0770                      u380 0716  
                    u620 07DE                      u540 07A7                      u460 0777  
                    u381 0715                      u621 07DD                      u541 07A6  
                    u461 0775                      u630 07E3                      u550 07AF  
                    u470 0778                      u631 07E2                      u551 07AE  
                    u640 07E9                      u560 07B5                      u480 0780  
                    u641 07E8                      u561 07B4                      u481 077D  
                    u570 07BB                      u707 067E                      u395 0725  
                    u571 07BA                      u580 07BF                      u581 07BE  
                    u590 07CC                      u494 0782                      u591 07CB  
                    u657 0767                      u667 0792                      u677 07C2  
                    u687 07EF                      u697 0673                      wreg 0009  
                   _T2PR 028D                     _main 0746                     btemp 007E  
                   start 0001                    ?_main 0070                    _T2CON 028E  
                  _T2HLT 028F                    _T2TMR 028C                    _T2RST 0291  
                  _blink 066D                    status 0003                    wtemp0 007E  
        __initialization 07F5             __end_of_main 07F5                   ??_main 007C  
                 ?_blink 0070                   _RC3PPS 1F23                   _RC4PPS 1F24  
                 ___wmul 069E  __end_of__initialization 07FE             ?_update_leds 0070  
         __pcstackCOMMON 0070             __pidataBANK0 066B            __end_of_blink 0684  
                ??_blink 0070            _current_color 007D               __pmaintext 0746  
                ?___wmul 0070                  _PWM3DCH 0315                  _PWM3DCL 0314  
                _PWM4DCH 0319                  _PWM4DCL 0318                  _PWM3CON 0316  
                _PWM4CON 031A                  _PPSLOCK 1E8F          set_pwm_duty@pwm 0079  
             _initialize 06BD                  __ptext1 0684                  __ptext2 06F5  
                __ptext3 069E                  __ptext4 06BD                  __ptext5 066D  
          ?_set_pwm_duty 0076                _T2CONbits 028E     end_of_initialization 07FE  
              _PORTAbits 000C                _PORTCbits 000E        set_pwm_duty@level 0076  
         ??_set_pwm_duty 0077                _TRISAbits 0012                _TRISCbits 0014  
         __end_of___wmul 06BD              ?_initialize 0070      start_initialization 07F5  
               ??___wmul 0074              __pdataBANK0 0020              __pbssCOMMON 007D  
              ___latbits 0000     __end_of_set_pwm_duty 0746                 _T2CLKCON 0290  
              _red_level 0021           ___wmul@product 0074                 _LATCbits 001A  
       set_pwm_duty@duty 007A        ___wmul@multiplier 0070                 _WPUAbits 1F39  
               _WPUCbits 1F4F            ??_update_leds 007C             ??_initialize 0070  
             _ANSELAbits 1F38               _ANSELCbits 1F4E             _orange_level 0020  
     __end_of_initialize 06F5      __end_of_update_leds 069E             _set_pwm_duty 06F5  
            _PPSLOCKbits 1E8F  
