

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Wed Oct  9 15:46:35 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F15323
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 11/01/2024 GMT
    19                           ; 
    20                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F15323 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0008                     bsr             equ	8
    53     0005                     fsr0h           equ	5
    54     0004                     fsr0l           equ	4
    55     0007                     fsr1h           equ	7
    56     0006                     fsr1l           equ	6
    57     0000                     indf            equ	0
    58     0000                     indf0           equ	0
    59     0001                     indf1           equ	1
    60     000B                     intcon          equ	11
    61     0002                     pc              equ	2
    62     0002                     pcl             equ	2
    63     000A                     pclath          equ	10
    64     0003                     status          equ	3
    65     0009                     wreg            equ	9
    66     0000                     INDF0           equ	0	;# 
    67     0001                     INDF1           equ	1	;# 
    68     0002                     PCL             equ	2	;# 
    69     0003                     STATUS          equ	3	;# 
    70     0004                     FSR0L           equ	4	;# 
    71     0005                     FSR0H           equ	5	;# 
    72     0006                     FSR1L           equ	6	;# 
    73     0007                     FSR1H           equ	7	;# 
    74     0008                     BSR             equ	8	;# 
    75     0009                     WREG            equ	9	;# 
    76     000A                     PCLATH          equ	10	;# 
    77     000B                     INTCON          equ	11	;# 
    78     000C                     PORTA           equ	12	;# 
    79     000E                     PORTC           equ	14	;# 
    80     0012                     TRISA           equ	18	;# 
    81     0014                     TRISC           equ	20	;# 
    82     0018                     LATA            equ	24	;# 
    83     001A                     LATC            equ	26	;# 
    84     009B                     ADRES           equ	155	;# 
    85     009B                     ADRESL          equ	155	;# 
    86     009C                     ADRESH          equ	156	;# 
    87     009D                     ADCON0          equ	157	;# 
    88     009E                     ADCON1          equ	158	;# 
    89     009F                     ADACT           equ	159	;# 
    90     0119                     RC1REG          equ	281	;# 
    91     0119                     RCREG           equ	281	;# 
    92     0119                     RCREG1          equ	281	;# 
    93     011A                     TX1REG          equ	282	;# 
    94     011A                     TXREG1          equ	282	;# 
    95     011A                     TXREG           equ	282	;# 
    96     011B                     SP1BRG          equ	283	;# 
    97     011B                     SPBRG           equ	283	;# 
    98     011B                     SP1BRGL         equ	283	;# 
    99     011B                     SPBRG1          equ	283	;# 
   100     011B                     SPBRGL          equ	283	;# 
   101     011C                     SP1BRGH         equ	284	;# 
   102     011C                     SPBRGH          equ	284	;# 
   103     011C                     SPBRGH1         equ	284	;# 
   104     011D                     RC1STA          equ	285	;# 
   105     011D                     RCSTA1          equ	285	;# 
   106     011D                     RCSTA           equ	285	;# 
   107     011E                     TX1STA          equ	286	;# 
   108     011E                     TXSTA1          equ	286	;# 
   109     011E                     TXSTA           equ	286	;# 
   110     011F                     BAUD1CON        equ	287	;# 
   111     011F                     BAUDCON1        equ	287	;# 
   112     011F                     BAUDCTL1        equ	287	;# 
   113     011F                     BAUDCON         equ	287	;# 
   114     011F                     BAUDCTL         equ	287	;# 
   115     018C                     SSP1BUF         equ	396	;# 
   116     018D                     SSP1ADD         equ	397	;# 
   117     018E                     SSP1MSK         equ	398	;# 
   118     018F                     SSP1STAT        equ	399	;# 
   119     0190                     SSP1CON1        equ	400	;# 
   120     0191                     SSP1CON2        equ	401	;# 
   121     0192                     SSP1CON3        equ	402	;# 
   122     020C                     TMR1            equ	524	;# 
   123     020C                     TMR1L           equ	524	;# 
   124     020D                     TMR1H           equ	525	;# 
   125     020E                     T1CON           equ	526	;# 
   126     020F                     T1GCON          equ	527	;# 
   127     020F                     PR1             equ	527	;# 
   128     0210                     T1GATE          equ	528	;# 
   129     0210                     TMR1GATE        equ	528	;# 
   130     0211                     T1CLK           equ	529	;# 
   131     0211                     TMR1CLK         equ	529	;# 
   132     028C                     T2TMR           equ	652	;# 
   133     028C                     TMR2            equ	652	;# 
   134     028D                     T2PR            equ	653	;# 
   135     028D                     PR2             equ	653	;# 
   136     028E                     T2CON           equ	654	;# 
   137     028F                     T2HLT           equ	655	;# 
   138     0290                     T2CLKCON        equ	656	;# 
   139     0291                     T2RST           equ	657	;# 
   140     030C                     CCPR1           equ	780	;# 
   141     030C                     CCPR1L          equ	780	;# 
   142     030D                     CCPR1H          equ	781	;# 
   143     030E                     CCP1CON         equ	782	;# 
   144     030F                     CCP1CAP         equ	783	;# 
   145     0310                     CCPR2           equ	784	;# 
   146     0310                     CCPR2L          equ	784	;# 
   147     0311                     CCPR2H          equ	785	;# 
   148     0312                     CCP2CON         equ	786	;# 
   149     0313                     CCP2CAP         equ	787	;# 
   150     0314                     PWM3DC          equ	788	;# 
   151     0314                     PWM3DCL         equ	788	;# 
   152     0315                     PWM3DCH         equ	789	;# 
   153     0316                     PWM3CON         equ	790	;# 
   154     0318                     PWM4DC          equ	792	;# 
   155     0318                     PWM4DCL         equ	792	;# 
   156     0319                     PWM4DCH         equ	793	;# 
   157     031A                     PWM4CON         equ	794	;# 
   158     031C                     PWM5DC          equ	796	;# 
   159     031C                     PWM5DCL         equ	796	;# 
   160     031D                     PWM5DCH         equ	797	;# 
   161     031E                     PWM5CON         equ	798	;# 
   162     038C                     PWM6DC          equ	908	;# 
   163     038C                     PWM6DCL         equ	908	;# 
   164     038D                     PWM6DCH         equ	909	;# 
   165     038E                     PWM6CON         equ	910	;# 
   166     058C                     NCO1ACC         equ	1420	;# 
   167     058C                     NCO1ACCL        equ	1420	;# 
   168     058D                     NCO1ACCH        equ	1421	;# 
   169     058E                     NCO1ACCU        equ	1422	;# 
   170     058F                     NCO1INC         equ	1423	;# 
   171     058F                     NCO1INCL        equ	1423	;# 
   172     0590                     NCO1INCH        equ	1424	;# 
   173     0591                     NCO1INCU        equ	1425	;# 
   174     0592                     NCO1CON         equ	1426	;# 
   175     0593                     NCO1CLK         equ	1427	;# 
   176     059C                     TMR0L           equ	1436	;# 
   177     059C                     TMR0            equ	1436	;# 
   178     059D                     TMR0H           equ	1437	;# 
   179     059D                     PR0             equ	1437	;# 
   180     059E                     T0CON0          equ	1438	;# 
   181     059F                     T0CON1          equ	1439	;# 
   182     060C                     CWG1CLKCON      equ	1548	;# 
   183     060D                     CWG1DAT         equ	1549	;# 
   184     060E                     CWG1DBR         equ	1550	;# 
   185     060F                     CWG1DBF         equ	1551	;# 
   186     0610                     CWG1CON0        equ	1552	;# 
   187     0611                     CWG1CON1        equ	1553	;# 
   188     0612                     CWG1AS0         equ	1554	;# 
   189     0613                     CWG1AS1         equ	1555	;# 
   190     0614                     CWG1STR         equ	1556	;# 
   191     070C                     PIR0            equ	1804	;# 
   192     070D                     PIR1            equ	1805	;# 
   193     070E                     PIR2            equ	1806	;# 
   194     070F                     PIR3            equ	1807	;# 
   195     0710                     PIR4            equ	1808	;# 
   196     0711                     PIR5            equ	1809	;# 
   197     0712                     PIR6            equ	1810	;# 
   198     0713                     PIR7            equ	1811	;# 
   199     0716                     PIE0            equ	1814	;# 
   200     0717                     PIE1            equ	1815	;# 
   201     0718                     PIE2            equ	1816	;# 
   202     0719                     PIE3            equ	1817	;# 
   203     071A                     PIE4            equ	1818	;# 
   204     071B                     PIE5            equ	1819	;# 
   205     071C                     PIE6            equ	1820	;# 
   206     071D                     PIE7            equ	1821	;# 
   207     0796                     PMD0            equ	1942	;# 
   208     0797                     PMD1            equ	1943	;# 
   209     0798                     PMD2            equ	1944	;# 
   210     0799                     PMD3            equ	1945	;# 
   211     079A                     PMD4            equ	1946	;# 
   212     079B                     PMD5            equ	1947	;# 
   213     080C                     WDTCON0         equ	2060	;# 
   214     080D                     WDTCON1         equ	2061	;# 
   215     080E                     WDTPSL          equ	2062	;# 
   216     080F                     WDTPSH          equ	2063	;# 
   217     0810                     WDTTMR          equ	2064	;# 
   218     0811                     BORCON          equ	2065	;# 
   219     0812                     VREGCON         equ	2066	;# 
   220     0813                     PCON0           equ	2067	;# 
   221     0814                     PCON1           equ	2068	;# 
   222     081A                     NVMADR          equ	2074	;# 
   223     081A                     NVMADRL         equ	2074	;# 
   224     081B                     NVMADRH         equ	2075	;# 
   225     081C                     NVMDAT          equ	2076	;# 
   226     081C                     NVMDATL         equ	2076	;# 
   227     081D                     NVMDATH         equ	2077	;# 
   228     081E                     NVMCON1         equ	2078	;# 
   229     081F                     NVMCON2         equ	2079	;# 
   230     088C                     CPUDOZE         equ	2188	;# 
   231     088D                     OSCCON1         equ	2189	;# 
   232     088E                     OSCCON2         equ	2190	;# 
   233     088F                     OSCCON3         equ	2191	;# 
   234     0890                     OSCSTAT         equ	2192	;# 
   235     0891                     OSCEN           equ	2193	;# 
   236     0892                     OSCTUNE         equ	2194	;# 
   237     0893                     OSCFRQ          equ	2195	;# 
   238     0895                     CLKRCON         equ	2197	;# 
   239     0896                     CLKRCLK         equ	2198	;# 
   240     090C                     FVRCON          equ	2316	;# 
   241     090E                     DAC1CON0        equ	2318	;# 
   242     090F                     DAC1CON1        equ	2319	;# 
   243     091F                     ZCDCON          equ	2335	;# 
   244     098F                     CMOUT           equ	2447	;# 
   245     098F                     CMSTAT          equ	2447	;# 
   246     0990                     CM1CON0         equ	2448	;# 
   247     0991                     CM1CON1         equ	2449	;# 
   248     0992                     CM1NCH          equ	2450	;# 
   249     0993                     CM1PCH          equ	2451	;# 
   250     0994                     CM2CON0         equ	2452	;# 
   251     0995                     CM2CON1         equ	2453	;# 
   252     0996                     CM2NCH          equ	2454	;# 
   253     0997                     CM2PCH          equ	2455	;# 
   254     1E0F                     CLCDATA         equ	7695	;# 
   255     1E10                     CLC1CON         equ	7696	;# 
   256     1E11                     CLC1POL         equ	7697	;# 
   257     1E12                     CLC1SEL0        equ	7698	;# 
   258     1E13                     CLC1SEL1        equ	7699	;# 
   259     1E14                     CLC1SEL2        equ	7700	;# 
   260     1E15                     CLC1SEL3        equ	7701	;# 
   261     1E16                     CLC1GLS0        equ	7702	;# 
   262     1E17                     CLC1GLS1        equ	7703	;# 
   263     1E18                     CLC1GLS2        equ	7704	;# 
   264     1E19                     CLC1GLS3        equ	7705	;# 
   265     1E1A                     CLC2CON         equ	7706	;# 
   266     1E1B                     CLC2POL         equ	7707	;# 
   267     1E1C                     CLC2SEL0        equ	7708	;# 
   268     1E1D                     CLC2SEL1        equ	7709	;# 
   269     1E1E                     CLC2SEL2        equ	7710	;# 
   270     1E1F                     CLC2SEL3        equ	7711	;# 
   271     1E20                     CLC2GLS0        equ	7712	;# 
   272     1E21                     CLC2GLS1        equ	7713	;# 
   273     1E22                     CLC2GLS2        equ	7714	;# 
   274     1E23                     CLC2GLS3        equ	7715	;# 
   275     1E24                     CLC3CON         equ	7716	;# 
   276     1E25                     CLC3POL         equ	7717	;# 
   277     1E26                     CLC3SEL0        equ	7718	;# 
   278     1E27                     CLC3SEL1        equ	7719	;# 
   279     1E28                     CLC3SEL2        equ	7720	;# 
   280     1E29                     CLC3SEL3        equ	7721	;# 
   281     1E2A                     CLC3GLS0        equ	7722	;# 
   282     1E2B                     CLC3GLS1        equ	7723	;# 
   283     1E2C                     CLC3GLS2        equ	7724	;# 
   284     1E2D                     CLC3GLS3        equ	7725	;# 
   285     1E2E                     CLC4CON         equ	7726	;# 
   286     1E2F                     CLC4POL         equ	7727	;# 
   287     1E30                     CLC4SEL0        equ	7728	;# 
   288     1E31                     CLC4SEL1        equ	7729	;# 
   289     1E32                     CLC4SEL2        equ	7730	;# 
   290     1E33                     CLC4SEL3        equ	7731	;# 
   291     1E34                     CLC4GLS0        equ	7732	;# 
   292     1E35                     CLC4GLS1        equ	7733	;# 
   293     1E36                     CLC4GLS2        equ	7734	;# 
   294     1E37                     CLC4GLS3        equ	7735	;# 
   295     1E8F                     PPSLOCK         equ	7823	;# 
   296     1E90                     INTPPS          equ	7824	;# 
   297     1E91                     T0CKIPPS        equ	7825	;# 
   298     1E92                     T1CKIPPS        equ	7826	;# 
   299     1E93                     T1GPPS          equ	7827	;# 
   300     1E9C                     T2INPPS         equ	7836	;# 
   301     1EA1                     CCP1PPS         equ	7841	;# 
   302     1EA2                     CCP2PPS         equ	7842	;# 
   303     1EB1                     CWG1PPS         equ	7857	;# 
   304     1EBB                     CLCIN0PPS       equ	7867	;# 
   305     1EBC                     CLCIN1PPS       equ	7868	;# 
   306     1EBD                     CLCIN2PPS       equ	7869	;# 
   307     1EBE                     CLCIN3PPS       equ	7870	;# 
   308     1EC3                     ADACTPPS        equ	7875	;# 
   309     1EC5                     SSP1CLKPPS      equ	7877	;# 
   310     1EC6                     SSP1DATPPS      equ	7878	;# 
   311     1EC7                     SSP1SSPPS       equ	7879	;# 
   312     1ECB                     RX1DTPPS        equ	7883	;# 
   313     1ECC                     TX1CKPPS        equ	7884	;# 
   314     1F10                     RA0PPS          equ	7952	;# 
   315     1F11                     RA1PPS          equ	7953	;# 
   316     1F12                     RA2PPS          equ	7954	;# 
   317     1F13                     RA3PPS          equ	7955	;# 
   318     1F14                     RA4PPS          equ	7956	;# 
   319     1F15                     RA5PPS          equ	7957	;# 
   320     1F20                     RC0PPS          equ	7968	;# 
   321     1F21                     RC1PPS          equ	7969	;# 
   322     1F22                     RC2PPS          equ	7970	;# 
   323     1F23                     RC3PPS          equ	7971	;# 
   324     1F24                     RC4PPS          equ	7972	;# 
   325     1F25                     RC5PPS          equ	7973	;# 
   326     1F38                     ANSELA          equ	7992	;# 
   327     1F39                     WPUA            equ	7993	;# 
   328     1F3A                     ODCONA          equ	7994	;# 
   329     1F3B                     SLRCONA         equ	7995	;# 
   330     1F3C                     INLVLA          equ	7996	;# 
   331     1F3D                     IOCAP           equ	7997	;# 
   332     1F3E                     IOCAN           equ	7998	;# 
   333     1F3F                     IOCAF           equ	7999	;# 
   334     1F4E                     ANSELC          equ	8014	;# 
   335     1F4F                     WPUC            equ	8015	;# 
   336     1F50                     ODCONC          equ	8016	;# 
   337     1F51                     SLRCONC         equ	8017	;# 
   338     1F52                     INLVLC          equ	8018	;# 
   339     1F53                     IOCCP           equ	8019	;# 
   340     1F54                     IOCCN           equ	8020	;# 
   341     1F55                     IOCCF           equ	8021	;# 
   342     1FE4                     STATUS_SHAD     equ	8164	;# 
   343     1FE5                     WREG_SHAD       equ	8165	;# 
   344     1FE6                     BSR_SHAD        equ	8166	;# 
   345     1FE7                     PCLATH_SHAD     equ	8167	;# 
   346     1FE8                     FSR0_SHAD       equ	8168	;# 
   347     1FE8                     FSR0L_SHAD      equ	8168	;# 
   348     1FE9                     FSR0H_SHAD      equ	8169	;# 
   349     1FEA                     FSR1_SHAD       equ	8170	;# 
   350     1FEA                     FSR1L_SHAD      equ	8170	;# 
   351     1FEB                     FSR1H_SHAD      equ	8171	;# 
   352     1FED                     STKPTR          equ	8173	;# 
   353     1FEE                     TOSL            equ	8174	;# 
   354     1FEF                     TOSH            equ	8175	;# 
   355                           
   356                           	psect	idataBANK0
   357     0672                     __pidataBANK0:
   358                           
   359                           ;initializer for _orange_level
   360     0672  3405               	retlw	5
   361                           
   362                           ;initializer for _red_level
   363     0673  3405               	retlw	5
   364     000C                     _PORTAbits      set	12
   365     000E                     _PORTCbits      set	14
   366     001A                     _LATCbits       set	26
   367     0012                     _TRISAbits      set	18
   368     0014                     _TRISCbits      set	20
   369     028E                     _T2CONbits      set	654
   370     028C                     _T2TMR          set	652
   371     028D                     _T2PR           set	653
   372     0291                     _T2RST          set	657
   373     028F                     _T2HLT          set	655
   374     0290                     _T2CLKCON       set	656
   375     028E                     _T2CON          set	654
   376     0318                     _PWM4DCL        set	792
   377     0319                     _PWM4DCH        set	793
   378     031A                     _PWM4CON        set	794
   379     0314                     _PWM3DCL        set	788
   380     0315                     _PWM3DCH        set	789
   381     0316                     _PWM3CON        set	790
   382     1E8F                     _PPSLOCKbits    set	7823
   383     1E8F                     _PPSLOCK        set	7823
   384     1F4F                     _WPUCbits       set	8015
   385     1F39                     _WPUAbits       set	7993
   386     1F4E                     _ANSELCbits     set	8014
   387     1F38                     _ANSELAbits     set	7992
   388     1F24                     _RC4PPS         set	7972
   389     1F23                     _RC3PPS         set	7971
   390                           
   391                           	psect	cinit
   392     07F5                     start_initialization:	
   393                           ; #config settings
   394                           
   395     07F5                     __initialization:
   396                           
   397                           ; Initialize objects allocated to BANK0
   398     07F5  3186  2672  3187   	fcall	__pidataBANK0	;fetch initializer
   399     07F8  00A0               	movwf	__pdataBANK0& (0+127)
   400     07F9  3186  2673  3187   	fcall	__pidataBANK0+1	;fetch initializer
   401     07FC  00A1               	movwf	(__pdataBANK0+1)& (0+127)
   402                           
   403                           ; Clear objects allocated to COMMON
   404     07FD  01FD               	clrf	__pbssCOMMON& (0+127)
   405     07FE                     end_of_initialization:	
   406                           ;End of C runtime variable initialization code
   407                           
   408     07FE                     __end_of__initialization:
   409     07FE  0140               	movlb	0
   410     07FF  2F48               	ljmp	_main	;jump to C main() function
   411                           
   412                           	psect	bssCOMMON
   413     007D                     __pbssCOMMON:
   414     007D                     _current_color:
   415     007D                     	ds	1
   416                           
   417                           	psect	dataBANK0
   418     0020                     __pdataBANK0:
   419     0020                     _orange_level:
   420     0020                     	ds	1
   421     0021                     _red_level:
   422     0021                     	ds	1
   423                           
   424                           	psect	cstackCOMMON
   425     0070                     __pcstackCOMMON:
   426     0070                     ?_initialize:
   427     0070                     ?_blink:	
   428                           ; 1 bytes @ 0x0
   429                           
   430     0070                     ?_update_leds:	
   431                           ; 1 bytes @ 0x0
   432                           
   433     0070                     ?_main:	
   434                           ; 1 bytes @ 0x0
   435                           
   436     0070                     ?___wmul:	
   437                           ; 1 bytes @ 0x0
   438                           
   439     0070                     ___wmul@multiplier:	
   440                           ; 2 bytes @ 0x0
   441                           
   442     0070                     ??_initialize:	
   443                           ; 2 bytes @ 0x0
   444                           
   445     0070                     ??_blink:	
   446                           ; 1 bytes @ 0x0
   447                           
   448                           
   449                           ; 1 bytes @ 0x0
   450     0070                     	ds	2
   451     0072                     ___wmul@multiplicand:
   452                           
   453                           ; 2 bytes @ 0x2
   454     0072                     	ds	2
   455     0074                     ___wmul@product:
   456     0074                     ??___wmul:	
   457                           ; 2 bytes @ 0x4
   458                           
   459                           
   460                           ; 1 bytes @ 0x4
   461     0074                     	ds	2
   462     0076                     ?_set_pwm_duty:
   463     0076                     set_pwm_duty@level:	
   464                           ; 1 bytes @ 0x6
   465                           
   466                           
   467                           ; 1 bytes @ 0x6
   468     0076                     	ds	1
   469     0077                     ??_set_pwm_duty:
   470                           
   471                           ; 1 bytes @ 0x7
   472     0077                     	ds	2
   473     0079                     set_pwm_duty@pwm:
   474                           
   475                           ; 1 bytes @ 0x9
   476     0079                     	ds	1
   477     007A                     set_pwm_duty@duty:
   478                           
   479                           ; 2 bytes @ 0xA
   480     007A                     	ds	2
   481     007C                     ??_update_leds:
   482     007C                     ??_main:	
   483                           ; 1 bytes @ 0xC
   484                           
   485                           
   486                           ; 1 bytes @ 0xC
   487     007C                     	ds	1
   488                           
   489                           	psect	maintext
   490     0748                     __pmaintext:	
   491 ;;
   492 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   493 ;;
   494 ;; *************** function _main *****************
   495 ;; Defined at:
   496 ;;		line 153 in file "main.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;		None
   499 ;; Auto vars:     Size  Location     Type
   500 ;;		None
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      void 
   503 ;; Registers used:
   504 ;;		wreg, status,2, status,0, pclath, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : B3F/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   510 ;;      Params:         0       0       0       0
   511 ;;      Locals:         0       0       0       0
   512 ;;      Temps:          1       0       0       0
   513 ;;      Totals:         1       0       0       0
   514 ;;Total ram usage:        1 bytes
   515 ;; Hardware stack levels required when called: 3
   516 ;; This function calls:
   517 ;;		_blink
   518 ;;		_initialize
   519 ;;		_update_leds
   520 ;; This function is called by:
   521 ;;		Startup code after reset
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525     0748                     _main:	
   526                           ;psect for function _main
   527                           
   528     0748                     l820:	
   529                           ;incstack = 0
   530                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   531                           
   532                           
   533                           ;main.c: 154:     initialize();
   534     0748  3186  26BF  3187   	fcall	_initialize
   535     074B                     l822:
   536                           
   537                           ;main.c: 155:     blink();
   538     074B  3186  2689  3187   	fcall	_blink
   539     074E                     l824:
   540                           
   541                           ;main.c: 156:     blink();
   542     074E  3186  2689  3187   	fcall	_blink
   543     0751                     l826:
   544                           
   545                           ;main.c: 157:     blink();
   546     0751  3186  2689  3187   	fcall	_blink
   547     0754                     l828:
   548                           
   549                           ;main.c: 159:     current_color = 0;
   550     0754  01FD               	clrf	_current_color
   551     0755                     l830:
   552                           
   553                           ;main.c: 160:     update_leds();
   554     0755  3186  2674  3187   	fcall	_update_leds
   555     0758                     l832:
   556                           
   557                           ;main.c: 161:     current_color = 1;
   558     0758  3001               	movlw	1
   559     0759  00FD               	movwf	_current_color
   560     075A                     l834:
   561                           
   562                           ;main.c: 162:     update_leds();
   563     075A  3186  2674  3187   	fcall	_update_leds
   564     075D                     l836:
   565                           
   566                           ;main.c: 164:     LATCbits.LATC1 = 1;
   567     075D  0140               	movlb	0	; select bank0
   568     075E  149A               	bsf	26,1	;volatile
   569     075F                     l838:
   570                           
   571                           ;main.c: 168:         if (PORTCbits.RC5 == 0) {
   572     075F  0140               	movlb	0	; select bank0
   573     0760  1A8E               	btfsc	14,5	;volatile
   574     0761  2F63               	goto	u421
   575     0762  2F64               	goto	u420
   576     0763                     u421:
   577     0763  2F8B               	goto	l85
   578     0764                     u420:
   579     0764                     l840:
   580                           
   581                           ;main.c: 169:             _delay((unsigned long)((30)*(1000000/4000.0)));
   582     0764  300A               	movlw	10
   583     0765  00FC               	movwf	??_main
   584     0766  30BC               	movlw	188
   585     0767                     u637:
   586     0767  0B89               	decfsz	9,f
   587     0768  2F67               	goto	u637
   588     0769  0BFC               	decfsz	??_main,f
   589     076A  2F67               	goto	u637
   590     076B  3200               	nop2
   591     076C                     l842:
   592                           
   593                           ;main.c: 170:             if (PORTCbits.RC5 == 0) {
   594     076C  0140               	movlb	0	; select bank0
   595     076D  1A8E               	btfsc	14,5	;volatile
   596     076E  2F70               	goto	u431
   597     076F  2F71               	goto	u430
   598     0770                     u431:
   599     0770  2F8B               	goto	l85
   600     0771                     u430:
   601     0771                     l844:
   602                           
   603                           ;main.c: 171:                 current_color = !current_color;
   604     0771  087D               	movf	_current_color,w
   605     0772  1903               	btfsc	3,2
   606     0773  2F75               	goto	u441
   607     0774  2F77               	goto	u440
   608     0775                     u441:
   609     0775  3001               	movlw	1
   610     0776  2F78               	goto	u450
   611     0777                     u440:
   612     0777  3000               	movlw	0
   613     0778                     u450:
   614     0778  00FD               	movwf	_current_color
   615     0779                     l846:
   616                           
   617                           ;main.c: 172:                 LATCbits.LATC1 = current_color;
   618     0779  0C7D               	rrf	_current_color,w
   619     077A  1C03               	skipc
   620     077B  109A               	bcf	26,1	;volatile
   621     077C  1803               	skipnc
   622     077D  149A               	bsf	26,1	;volatile
   623     077E                     l848:
   624                           
   625                           ;main.c: 173:                 LATCbits.LATC2 = !current_color;
   626     077E  087D               	movf	_current_color,w
   627     077F  1903               	btfsc	3,2
   628     0780  2F82               	goto	u461
   629     0781  2F85               	goto	u460
   630     0782                     u461:
   631     0782  0140               	movlb	0	; select bank0
   632     0783  151A               	bsf	26,2	;volatile
   633     0784  2F87               	goto	u474
   634     0785                     u460:
   635     0785  0140               	movlb	0	; select bank0
   636     0786  111A               	bcf	26,2	;volatile
   637     0787                     u474:
   638     0787                     l87:	
   639                           ;main.c: 174:                 while (PORTCbits.RC5 == 0);
   640                           
   641     0787  1E8E               	btfss	14,5	;volatile
   642     0788  2F8A               	goto	u481
   643     0789  2F8B               	goto	u480
   644     078A                     u481:
   645     078A  2F87               	goto	l87
   646     078B                     u480:
   647     078B                     l85:	
   648                           ;main.c: 176:         }
   649                           
   650                           
   651                           ;main.c: 179:         if (PORTCbits.RC0 == 0) {
   652     078B  180E               	btfsc	14,0	;volatile
   653     078C  2F8E               	goto	u491
   654     078D  2F8F               	goto	u490
   655     078E                     u491:
   656     078E  2FBB               	goto	l90
   657     078F                     u490:
   658     078F                     l850:
   659                           
   660                           ;main.c: 180:             _delay((unsigned long)((30)*(1000000/4000.0)));
   661     078F  300A               	movlw	10
   662     0790  00FC               	movwf	??_main
   663     0791  30BC               	movlw	188
   664     0792                     u647:
   665     0792  0B89               	decfsz	9,f
   666     0793  2F92               	goto	u647
   667     0794  0BFC               	decfsz	??_main,f
   668     0795  2F92               	goto	u647
   669     0796  3200               	nop2
   670     0797                     l852:
   671                           
   672                           ;main.c: 181:             if (PORTCbits.RC0 == 0) {
   673     0797  0140               	movlb	0	; select bank0
   674     0798  180E               	btfsc	14,0	;volatile
   675     0799  2F9B               	goto	u501
   676     079A  2F9C               	goto	u500
   677     079B                     u501:
   678     079B  2FBB               	goto	l90
   679     079C                     u500:
   680     079C                     l854:
   681                           
   682                           ;main.c: 182:                 if (current_color == 0 && red_level < 5) {
   683     079C  087D               	movf	_current_color,w
   684     079D  1D03               	btfss	3,2
   685     079E  2FA0               	goto	u511
   686     079F  2FA1               	goto	u510
   687     07A0                     u511:
   688     07A0  2FAA               	goto	l860
   689     07A1                     u510:
   690     07A1                     l856:
   691     07A1  3005               	movlw	5
   692     07A2  0221               	subwf	_red_level,w
   693     07A3  1803               	skipnc
   694     07A4  2FA6               	goto	u521
   695     07A5  2FA7               	goto	u520
   696     07A6                     u521:
   697     07A6  2FAA               	goto	l860
   698     07A7                     u520:
   699     07A7                     l858:
   700                           
   701                           ;main.c: 183:                     red_level++;
   702     07A7  3001               	movlw	1
   703     07A8  07A1               	addwf	_red_level,f
   704                           
   705                           ;main.c: 184:                 } else if (current_color == 1 && orange_level < 5) {
   706     07A9  2FB7               	goto	l95
   707     07AA                     l860:
   708     07AA  037D               	decf	_current_color,w
   709     07AB  1D03               	btfss	3,2
   710     07AC  2FAE               	goto	u531
   711     07AD  2FAF               	goto	u530
   712     07AE                     u531:
   713     07AE  2FB7               	goto	l95
   714     07AF                     u530:
   715     07AF                     l862:
   716     07AF  3005               	movlw	5
   717     07B0  0220               	subwf	_orange_level,w
   718     07B1  1803               	skipnc
   719     07B2  2FB4               	goto	u541
   720     07B3  2FB5               	goto	u540
   721     07B4                     u541:
   722     07B4  2FB7               	goto	l95
   723     07B5                     u540:
   724     07B5                     l864:
   725                           
   726                           ;main.c: 185:                     orange_level++;
   727     07B5  3001               	movlw	1
   728     07B6  07A0               	addwf	_orange_level,f
   729     07B7                     l95:
   730     07B7  1C0E               	btfss	14,0	;volatile
   731     07B8  2FBA               	goto	u551
   732     07B9  2FBB               	goto	u550
   733     07BA                     u551:
   734     07BA  2FB7               	goto	l95
   735     07BB                     u550:
   736     07BB                     l90:	
   737                           ;main.c: 189:         }
   738                           
   739                           
   740                           ;main.c: 192:         if (PORTAbits.RA2 == 0) {
   741     07BB  190C               	btfsc	12,2	;volatile
   742     07BC  2FBE               	goto	u561
   743     07BD  2FBF               	goto	u560
   744     07BE                     u561:
   745     07BE  2FE9               	goto	l882
   746     07BF                     u560:
   747     07BF                     l866:
   748                           
   749                           ;main.c: 193:             _delay((unsigned long)((30)*(1000000/4000.0)));
   750     07BF  300A               	movlw	10
   751     07C0  00FC               	movwf	??_main
   752     07C1  30BC               	movlw	188
   753     07C2                     u657:
   754     07C2  0B89               	decfsz	9,f
   755     07C3  2FC2               	goto	u657
   756     07C4  0BFC               	decfsz	??_main,f
   757     07C5  2FC2               	goto	u657
   758     07C6  3200               	nop2
   759     07C7                     l868:
   760                           
   761                           ;main.c: 194:             if (PORTAbits.RA2 == 0) {
   762     07C7  0140               	movlb	0	; select bank0
   763     07C8  190C               	btfsc	12,2	;volatile
   764     07C9  2FCB               	goto	u571
   765     07CA  2FCC               	goto	u570
   766     07CB                     u571:
   767     07CB  2FE9               	goto	l882
   768     07CC                     u570:
   769     07CC                     l870:
   770                           
   771                           ;main.c: 195:                 if (current_color == 0 && red_level > 0) {
   772     07CC  087D               	movf	_current_color,w
   773     07CD  1D03               	btfss	3,2
   774     07CE  2FD0               	goto	u581
   775     07CF  2FD1               	goto	u580
   776     07D0                     u581:
   777     07D0  2FD9               	goto	l876
   778     07D1                     u580:
   779     07D1                     l872:
   780     07D1  0821               	movf	_red_level,w
   781     07D2  1903               	btfsc	3,2
   782     07D3  2FD5               	goto	u591
   783     07D4  2FD6               	goto	u590
   784     07D5                     u591:
   785     07D5  2FD9               	goto	l876
   786     07D6                     u590:
   787     07D6                     l874:
   788                           
   789                           ;main.c: 196:                     red_level--;
   790     07D6  3001               	movlw	1
   791     07D7  02A1               	subwf	_red_level,f
   792                           
   793                           ;main.c: 197:                 } else if (current_color == 1 && orange_level > 0) {
   794     07D8  2FE5               	goto	l103
   795     07D9                     l876:
   796     07D9  037D               	decf	_current_color,w
   797     07DA  1D03               	btfss	3,2
   798     07DB  2FDD               	goto	u601
   799     07DC  2FDE               	goto	u600
   800     07DD                     u601:
   801     07DD  2FE5               	goto	l103
   802     07DE                     u600:
   803     07DE                     l878:
   804     07DE  0820               	movf	_orange_level,w
   805     07DF  1903               	btfsc	3,2
   806     07E0  2FE2               	goto	u611
   807     07E1  2FE3               	goto	u610
   808     07E2                     u611:
   809     07E2  2FE5               	goto	l103
   810     07E3                     u610:
   811     07E3                     l880:
   812                           
   813                           ;main.c: 198:                     orange_level--;
   814     07E3  3001               	movlw	1
   815     07E4  02A0               	subwf	_orange_level,f
   816     07E5                     l103:
   817     07E5  1D0C               	btfss	12,2	;volatile
   818     07E6  2FE8               	goto	u621
   819     07E7  2FE9               	goto	u620
   820     07E8                     u621:
   821     07E8  2FE5               	goto	l103
   822     07E9                     u620:
   823     07E9                     l882:
   824                           
   825                           ;main.c: 204:         update_leds();
   826     07E9  3186  2674  3187   	fcall	_update_leds
   827     07EC                     l884:
   828                           
   829                           ;main.c: 205:         _delay((unsigned long)((10)*(1000000/4000.0)));
   830     07EC  3004               	movlw	4
   831     07ED  00FC               	movwf	??_main
   832     07EE  303E               	movlw	62
   833     07EF                     u667:
   834     07EF  0B89               	decfsz	9,f
   835     07F0  2FEF               	goto	u667
   836     07F1  0BFC               	decfsz	??_main,f
   837     07F2  2FEF               	goto	u667
   838     07F3  2F5F               	goto	l838
   839     07F4  2801               	ljmp	start
   840     07F5                     __end_of_main:
   841                           
   842                           	psect	text1
   843     0674                     __ptext1:	
   844 ;; *************** function _update_leds *****************
   845 ;; Defined at:
   846 ;;		line 145 in file "main.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;		None
   851 ;; Return value:  Size  Location     Type
   852 ;;                  1    wreg      void 
   853 ;; Registers used:
   854 ;;		wreg, status,2, status,0, pclath, cstack
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   860 ;;      Params:         0       0       0       0
   861 ;;      Locals:         0       0       0       0
   862 ;;      Temps:          0       0       0       0
   863 ;;      Totals:         0       0       0       0
   864 ;;Total ram usage:        0 bytes
   865 ;; Hardware stack levels used: 1
   866 ;; Hardware stack levels required when called: 2
   867 ;; This function calls:
   868 ;;		_set_pwm_duty
   869 ;; This function is called by:
   870 ;;		_main
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874     0674                     _update_leds:	
   875                           ;psect for function _update_leds
   876                           
   877     0674                     l814:	
   878                           ;incstack = 0
   879                           ; Regs used in _update_leds: [wreg+status,2+status,0+pclath+cstack]
   880                           
   881                           
   882                           ;main.c: 146:     if (current_color == 0) {
   883     0674  087D               	movf	_current_color,w
   884     0675  1D03               	btfss	3,2
   885     0676  2E78               	goto	u411
   886     0677  2E79               	goto	u410
   887     0678                     u411:
   888     0678  2E81               	goto	l818
   889     0679                     u410:
   890     0679                     l816:
   891                           
   892                           ;main.c: 147:         set_pwm_duty(3, red_level);
   893     0679  0140               	movlb	0	; select bank0
   894     067A  0821               	movf	_red_level,w
   895     067B  00F6               	movwf	set_pwm_duty@level
   896     067C  3003               	movlw	3
   897     067D  3186  26F7  3186   	fcall	_set_pwm_duty
   898                           
   899                           ;main.c: 148:     } else {
   900     0680  2E88               	goto	l79
   901     0681                     l818:
   902                           
   903                           ;main.c: 149:         set_pwm_duty(4, orange_level);
   904     0681  0140               	movlb	0	; select bank0
   905     0682  0820               	movf	_orange_level,w
   906     0683  00F6               	movwf	set_pwm_duty@level
   907     0684  3004               	movlw	4
   908     0685  3186  26F7  3186   	fcall	_set_pwm_duty
   909     0688                     l79:
   910     0688  0008               	return
   911     0689                     __end_of_update_leds:
   912                           
   913                           	psect	text2
   914     06F7                     __ptext2:	
   915 ;; *************** function _set_pwm_duty *****************
   916 ;; Defined at:
   917 ;;		line 126 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;  pwm             1    wreg     unsigned char 
   920 ;;  level           1    6[COMMON] unsigned char 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  pwm             1    9[COMMON] unsigned char 
   923 ;;  duty            2   10[COMMON] unsigned short 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      void 
   926 ;; Registers used:
   927 ;;		wreg, status,2, status,0, pclath, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   933 ;;      Params:         1       0       0       0
   934 ;;      Locals:         3       0       0       0
   935 ;;      Temps:          2       0       0       0
   936 ;;      Totals:         6       0       0       0
   937 ;;Total ram usage:        6 bytes
   938 ;; Hardware stack levels used: 1
   939 ;; Hardware stack levels required when called: 1
   940 ;; This function calls:
   941 ;;		___wmul
   942 ;; This function is called by:
   943 ;;		_update_leds
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947     06F7                     _set_pwm_duty:	
   948                           ;psect for function _set_pwm_duty
   949                           
   950                           
   951                           ;incstack = 0
   952                           ; Regs used in _set_pwm_duty: [wreg+status,2+status,0+pclath+cstack]
   953                           ;set_pwm_duty@pwm stored from wreg
   954     06F7  00F9               	movwf	set_pwm_duty@pwm
   955     06F8                     l774:
   956                           
   957                           ;main.c: 127:     uint16_t duty;;main.c: 130:     if (level == 0) {
   958     06F8  0876               	movf	set_pwm_duty@level,w
   959     06F9  1D03               	btfss	3,2
   960     06FA  2EFC               	goto	u361
   961     06FB  2EFD               	goto	u360
   962     06FC                     u361:
   963     06FC  2F00               	goto	l778
   964     06FD                     u360:
   965     06FD                     l776:
   966                           
   967                           ;main.c: 131:         duty = 0;
   968     06FD  01FA               	clrf	set_pwm_duty@duty
   969     06FE  01FB               	clrf	set_pwm_duty@duty+1
   970                           
   971                           ;main.c: 132:     } else {
   972     06FF  2F12               	goto	l780
   973     0700                     l778:
   974                           
   975                           ;main.c: 133:         duty = (level * 51);
   976     0700  0876               	movf	set_pwm_duty@level,w
   977     0701  00F7               	movwf	??_set_pwm_duty
   978     0702  01F8               	clrf	??_set_pwm_duty+1
   979     0703  0877               	movf	??_set_pwm_duty,w
   980     0704  00F0               	movwf	___wmul@multiplier
   981     0705  0878               	movf	??_set_pwm_duty+1,w
   982     0706  00F1               	movwf	___wmul@multiplier+1
   983     0707  3033               	movlw	51
   984     0708  00F2               	movwf	___wmul@multiplicand
   985     0709  3000               	movlw	0
   986     070A  00F3               	movwf	___wmul@multiplicand+1
   987     070B  3186  26A0  3186   	fcall	___wmul
   988     070E  0871               	movf	?___wmul+1,w
   989     070F  00FB               	movwf	set_pwm_duty@duty+1
   990     0710  0870               	movf	?___wmul,w
   991     0711  00FA               	movwf	set_pwm_duty@duty
   992     0712                     l780:
   993                           
   994                           ;main.c: 136:     if (pwm == 3) {
   995     0712  3003               	movlw	3
   996     0713  0679               	xorwf	set_pwm_duty@pwm,w
   997     0714  1D03               	btfss	3,2
   998     0715  2F17               	goto	u371
   999     0716  2F18               	goto	u370
  1000     0717                     u371:
  1001     0717  2F2D               	goto	l784
  1002     0718                     u370:
  1003     0718                     l782:
  1004                           
  1005                           ;main.c: 137:         PWM3DCH = duty >> 2;
  1006     0718  087B               	movf	set_pwm_duty@duty+1,w
  1007     0719  00F8               	movwf	??_set_pwm_duty+1
  1008     071A  087A               	movf	set_pwm_duty@duty,w
  1009     071B  00F7               	movwf	??_set_pwm_duty
  1010     071C  36F8               	lsrf	??_set_pwm_duty+1,f
  1011     071D  0CF7               	rrf	??_set_pwm_duty,f
  1012     071E  36F8               	lsrf	??_set_pwm_duty+1,f
  1013     071F  0CF7               	rrf	??_set_pwm_duty,f
  1014     0720  0877               	movf	??_set_pwm_duty,w
  1015     0721  0146               	movlb	6	; select bank6
  1016     0722  0095               	movwf	21	;volatile
  1017                           
  1018                           ;main.c: 138:         PWM3DCL = (duty & 0x03) << 6;
  1019     0723  087A               	movf	set_pwm_duty@duty,w
  1020     0724  3903               	andlw	3
  1021     0725  00F7               	movwf	??_set_pwm_duty
  1022     0726  3006               	movlw	6
  1023     0727                     u385:
  1024     0727  35F7               	lslf	??_set_pwm_duty,f
  1025     0728  0B89               	decfsz	9,f
  1026     0729  2F27               	goto	u385
  1027     072A  0877               	movf	??_set_pwm_duty,w
  1028     072B  0094               	movwf	20	;volatile
  1029                           
  1030                           ;main.c: 139:     } else if (pwm == 4) {
  1031     072C  2F47               	goto	l74
  1032     072D                     l784:
  1033     072D  3004               	movlw	4
  1034     072E  0679               	xorwf	set_pwm_duty@pwm,w
  1035     072F  1D03               	btfss	3,2
  1036     0730  2F32               	goto	u391
  1037     0731  2F33               	goto	u390
  1038     0732                     u391:
  1039     0732  2F47               	goto	l74
  1040     0733                     u390:
  1041     0733                     l786:
  1042                           
  1043                           ;main.c: 140:         PWM4DCH = duty >> 2;
  1044     0733  087B               	movf	set_pwm_duty@duty+1,w
  1045     0734  00F8               	movwf	??_set_pwm_duty+1
  1046     0735  087A               	movf	set_pwm_duty@duty,w
  1047     0736  00F7               	movwf	??_set_pwm_duty
  1048     0737  36F8               	lsrf	??_set_pwm_duty+1,f
  1049     0738  0CF7               	rrf	??_set_pwm_duty,f
  1050     0739  36F8               	lsrf	??_set_pwm_duty+1,f
  1051     073A  0CF7               	rrf	??_set_pwm_duty,f
  1052     073B  0877               	movf	??_set_pwm_duty,w
  1053     073C  0146               	movlb	6	; select bank6
  1054     073D  0099               	movwf	25	;volatile
  1055                           
  1056                           ;main.c: 141:         PWM4DCL = (duty & 0x03) << 6;
  1057     073E  087A               	movf	set_pwm_duty@duty,w
  1058     073F  3903               	andlw	3
  1059     0740  00F7               	movwf	??_set_pwm_duty
  1060     0741  3006               	movlw	6
  1061     0742                     u405:
  1062     0742  35F7               	lslf	??_set_pwm_duty,f
  1063     0743  0B89               	decfsz	9,f
  1064     0744  2F42               	goto	u405
  1065     0745  0877               	movf	??_set_pwm_duty,w
  1066     0746  0098               	movwf	24	;volatile
  1067     0747                     l74:
  1068     0747  0008               	return
  1069     0748                     __end_of_set_pwm_duty:
  1070                           
  1071                           	psect	text3
  1072     06A0                     __ptext3:	
  1073 ;; *************** function ___wmul *****************
  1074 ;; Defined at:
  1075 ;;		line 15 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/Umul16.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;  multiplier      2    0[COMMON] unsigned int 
  1078 ;;  multiplicand    2    2[COMMON] unsigned int 
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;  product         2    4[COMMON] unsigned int 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  2    0[COMMON] unsigned int 
  1083 ;; Registers used:
  1084 ;;		wreg, status,2, status,0
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1090 ;;      Params:         4       0       0       0
  1091 ;;      Locals:         2       0       0       0
  1092 ;;      Temps:          0       0       0       0
  1093 ;;      Totals:         6       0       0       0
  1094 ;;Total ram usage:        6 bytes
  1095 ;; Hardware stack levels used: 1
  1096 ;; This function calls:
  1097 ;;		Nothing
  1098 ;; This function is called by:
  1099 ;;		_set_pwm_duty
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103     06A0                     ___wmul:	
  1104                           ;psect for function ___wmul
  1105                           
  1106     06A0                     l760:	
  1107                           ;incstack = 0
  1108                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1109                           
  1110     06A0  01F4               	clrf	___wmul@product
  1111     06A1  01F5               	clrf	___wmul@product+1
  1112     06A2                     l762:
  1113     06A2  1C70               	btfss	___wmul@multiplier,0
  1114     06A3  2EA5               	goto	u321
  1115     06A4  2EA6               	goto	u320
  1116     06A5                     u321:
  1117     06A5  2EAA               	goto	l176
  1118     06A6                     u320:
  1119     06A6                     l764:
  1120     06A6  0872               	movf	___wmul@multiplicand,w
  1121     06A7  07F4               	addwf	___wmul@product,f
  1122     06A8  0873               	movf	___wmul@multiplicand+1,w
  1123     06A9  3DF5               	addwfc	___wmul@product+1,f
  1124     06AA                     l176:
  1125     06AA  3001               	movlw	1
  1126     06AB                     u335:
  1127     06AB  35F2               	lslf	___wmul@multiplicand,f
  1128     06AC  0DF3               	rlf	___wmul@multiplicand+1,f
  1129     06AD  0B89               	decfsz	9,f
  1130     06AE  2EAB               	goto	u335
  1131     06AF                     l766:
  1132     06AF  3001               	movlw	1
  1133     06B0                     u345:
  1134     06B0  36F1               	lsrf	___wmul@multiplier+1,f
  1135     06B1  0CF0               	rrf	___wmul@multiplier,f
  1136     06B2  0B89               	decfsz	9,f
  1137     06B3  2EB0               	goto	u345
  1138     06B4                     l768:
  1139     06B4  0870               	movf	___wmul@multiplier,w
  1140     06B5  0471               	iorwf	___wmul@multiplier+1,w
  1141     06B6  1D03               	btfss	3,2
  1142     06B7  2EB9               	goto	u351
  1143     06B8  2EBA               	goto	u350
  1144     06B9                     u351:
  1145     06B9  2EA2               	goto	l762
  1146     06BA                     u350:
  1147     06BA                     l770:
  1148     06BA  0875               	movf	___wmul@product+1,w
  1149     06BB  00F1               	movwf	?___wmul+1
  1150     06BC  0874               	movf	___wmul@product,w
  1151     06BD  00F0               	movwf	?___wmul
  1152     06BE                     l178:
  1153     06BE  0008               	return
  1154     06BF                     __end_of___wmul:
  1155                           
  1156                           	psect	text4
  1157     06BF                     __ptext4:	
  1158 ;; *************** function _initialize *****************
  1159 ;; Defined at:
  1160 ;;		line 44 in file "main.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;		None
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;		None
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  1    wreg      void 
  1167 ;; Registers used:
  1168 ;;		status,2
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1174 ;;      Params:         0       0       0       0
  1175 ;;      Locals:         0       0       0       0
  1176 ;;      Temps:          0       0       0       0
  1177 ;;      Totals:         0       0       0       0
  1178 ;;Total ram usage:        0 bytes
  1179 ;; Hardware stack levels used: 1
  1180 ;; This function calls:
  1181 ;;		Nothing
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187     06BF                     _initialize:	
  1188                           ;psect for function _initialize
  1189                           
  1190     06BF                     l788:	
  1191                           ;incstack = 0
  1192                           ; Regs used in _initialize: [status,2]
  1193                           
  1194                           
  1195                           ;main.c: 47:     PPSLOCK = 0x55;
  1196     06BF  3055               	movlw	85
  1197     06C0  017D               	movlb	61	; select bank61
  1198     06C1  008F               	movwf	15	;volsfr
  1199                           
  1200                           ;main.c: 48:     PPSLOCK = 0xAA;
  1201     06C2  30AA               	movlw	170
  1202     06C3  008F               	movwf	15	;volsfr
  1203                           
  1204                           ;main.c: 49:     PPSLOCKbits.PPSLOCKED = 0;
  1205     06C4  100F               	bcf	15,0	;volsfr
  1206                           
  1207                           ;main.c: 52:     RC3PPS = 0x0B;
  1208     06C5  300B               	movlw	11
  1209     06C6  017E               	movlb	62	; select bank62
  1210     06C7  00A3               	movwf	35	;volatile
  1211                           
  1212                           ;main.c: 53:     RC4PPS = 0x0C;
  1213     06C8  300C               	movlw	12
  1214     06C9  00A4               	movwf	36	;volatile
  1215                           
  1216                           ;main.c: 56:     PPSLOCK = 0x55;
  1217     06CA  3055               	movlw	85
  1218     06CB  017D               	movlb	61	; select bank61
  1219     06CC  008F               	movwf	15	;volsfr
  1220                           
  1221                           ;main.c: 57:     PPSLOCK = 0xAA;
  1222     06CD  30AA               	movlw	170
  1223     06CE  008F               	movwf	15	;volsfr
  1224                           
  1225                           ;main.c: 58:     PPSLOCKbits.PPSLOCKED = 1;
  1226     06CF  140F               	bsf	15,0	;volsfr
  1227                           
  1228                           ;main.c: 61:     TRISCbits.TRISC5 = 1;
  1229     06D0  0140               	movlb	0	; select bank0
  1230     06D1  1694               	bsf	20,5	;volatile
  1231                           
  1232                           ;main.c: 62:     TRISCbits.TRISC0 = 1;
  1233     06D2  1414               	bsf	20,0	;volatile
  1234                           
  1235                           ;main.c: 63:     TRISAbits.TRISA2 = 1;
  1236     06D3  1512               	bsf	18,2	;volatile
  1237                           
  1238                           ;main.c: 66:     TRISCbits.TRISC1 = 0;
  1239     06D4  1094               	bcf	20,1	;volatile
  1240                           
  1241                           ;main.c: 67:     TRISCbits.TRISC2 = 0;
  1242     06D5  1114               	bcf	20,2	;volatile
  1243                           
  1244                           ;main.c: 69:     TRISCbits.TRISC3 = 0;
  1245     06D6  1194               	bcf	20,3	;volatile
  1246                           
  1247                           ;main.c: 70:     TRISCbits.TRISC4 = 0;
  1248     06D7  1214               	bcf	20,4	;volatile
  1249                           
  1250                           ;main.c: 73:     ANSELAbits.ANSA2 = 0;
  1251     06D8  017E               	movlb	62	; select bank62
  1252     06D9  1138               	bcf	56,2	;volatile
  1253                           
  1254                           ;main.c: 74:     ANSELCbits.ANSC0 = 0;
  1255     06DA  104E               	bcf	78,0	;volatile
  1256                           
  1257                           ;main.c: 75:     ANSELCbits.ANSC5 = 0;
  1258     06DB  12CE               	bcf	78,5	;volatile
  1259                           
  1260                           ;main.c: 78:     WPUAbits.WPUA2 = 1;
  1261     06DC  1539               	bsf	57,2	;volatile
  1262                           
  1263                           ;main.c: 79:     WPUCbits.WPUC0 = 1;
  1264     06DD  144F               	bsf	79,0	;volatile
  1265                           
  1266                           ;main.c: 80:     WPUCbits.WPUC5 = 1;
  1267     06DE  16CF               	bsf	79,5	;volatile
  1268                           
  1269                           ;main.c: 85:     PWM3CON = 0b10000000;
  1270     06DF  3080               	movlw	128
  1271     06E0  0146               	movlb	6	; select bank6
  1272     06E1  0096               	movwf	22	;volatile
  1273     06E2                     l790:
  1274                           
  1275                           ;main.c: 86:     PWM3DCH = 0;
  1276     06E2  0195               	clrf	21	;volatile
  1277                           
  1278                           ;main.c: 87:     PWM3DCL = 0;
  1279     06E3  0194               	clrf	20	;volatile
  1280     06E4                     l792:
  1281                           
  1282                           ;main.c: 90:     PWM4CON = 0b10000000;
  1283     06E4  3080               	movlw	128
  1284     06E5  009A               	movwf	26	;volatile
  1285                           
  1286                           ;main.c: 91:     PWM4DCH = 0;
  1287     06E6  0199               	clrf	25	;volatile
  1288                           
  1289                           ;main.c: 92:     PWM4DCL = 0;
  1290     06E7  0198               	clrf	24	;volatile
  1291     06E8                     l794:
  1292                           
  1293                           ;main.c: 95:     T2CON = 0x40;
  1294     06E8  3040               	movlw	64
  1295     06E9  0145               	movlb	5	; select bank5
  1296     06EA  008E               	movwf	14	;volatile
  1297     06EB                     l796:
  1298                           
  1299                           ;main.c: 96:     T2CLKCON = 0x01;
  1300     06EB  3001               	movlw	1
  1301     06EC  0090               	movwf	16	;volatile
  1302                           
  1303                           ;main.c: 97:     T2HLT = 0x00;
  1304     06ED  018F               	clrf	15	;volatile
  1305                           
  1306                           ;main.c: 98:     T2RST = 0x00;
  1307     06EE  0191               	clrf	17	;volatile
  1308     06EF                     l798:
  1309                           
  1310                           ;main.c: 99:     T2PR = 0xFF;
  1311     06EF  30FF               	movlw	255
  1312     06F0  008D               	movwf	13	;volatile
  1313                           
  1314                           ;main.c: 100:     T2TMR = 0x00;
  1315     06F1  018C               	clrf	12	;volatile
  1316     06F2                     l800:
  1317                           
  1318                           ;main.c: 101:     T2CONbits.TMR2ON = 1;
  1319     06F2  178E               	bsf	14,7	;volatile
  1320     06F3                     l802:
  1321                           
  1322                           ;main.c: 104:     LATCbits.LATC1 = 0;
  1323     06F3  0140               	movlb	0	; select bank0
  1324     06F4  109A               	bcf	26,1	;volatile
  1325     06F5                     l804:
  1326                           
  1327                           ;main.c: 105:     LATCbits.LATC2 = 0;
  1328     06F5  111A               	bcf	26,2	;volatile
  1329     06F6                     l63:
  1330     06F6  0008               	return
  1331     06F7                     __end_of_initialize:
  1332                           
  1333                           	psect	text5
  1334     0689                     __ptext5:	
  1335 ;; *************** function _blink *****************
  1336 ;; Defined at:
  1337 ;;		line 108 in file "main.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;		None
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;		None
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1351 ;;      Params:         0       0       0       0
  1352 ;;      Locals:         0       0       0       0
  1353 ;;      Temps:          1       0       0       0
  1354 ;;      Totals:         1       0       0       0
  1355 ;;Total ram usage:        1 bytes
  1356 ;; Hardware stack levels used: 1
  1357 ;; This function calls:
  1358 ;;		Nothing
  1359 ;; This function is called by:
  1360 ;;		_main
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364     0689                     _blink:	
  1365                           ;psect for function _blink
  1366                           
  1367     0689                     l806:	
  1368                           ;incstack = 0
  1369                           ; Regs used in _blink: [wreg]
  1370                           
  1371                           
  1372                           ;main.c: 111:         LATCbits.LATC1 = 1;
  1373     0689  0140               	movlb	0	; select bank0
  1374     068A  149A               	bsf	26,1	;volatile
  1375                           
  1376                           ;main.c: 112:         LATCbits.LATC2 = 1;
  1377     068B  151A               	bsf	26,2	;volatile
  1378     068C                     l808:
  1379                           
  1380                           ;main.c: 115:         _delay((unsigned long)((200)*(1000000/4000.0)));
  1381     068C  3041               	movlw	65
  1382     068D  00F0               	movwf	??_blink
  1383     068E  30EE               	movlw	238
  1384     068F                     u677:
  1385     068F  0B89               	decfsz	9,f
  1386     0690  2E8F               	goto	u677
  1387     0691  0BF0               	decfsz	??_blink,f
  1388     0692  2E8F               	goto	u677
  1389     0693  3200               	nop2
  1390     0694                     l810:
  1391                           
  1392                           ;main.c: 118:         LATCbits.LATC1 = 0;
  1393     0694  0140               	movlb	0	; select bank0
  1394     0695  109A               	bcf	26,1	;volatile
  1395     0696                     l812:
  1396                           
  1397                           ;main.c: 119:         LATCbits.LATC2 = 0;
  1398     0696  111A               	bcf	26,2	;volatile
  1399                           
  1400                           ;main.c: 122:         _delay((unsigned long)((200)*(1000000/4000.0)));
  1401     0697  3041               	movlw	65
  1402     0698  00F0               	movwf	??_blink
  1403     0699  30EE               	movlw	238
  1404     069A                     u687:
  1405     069A  0B89               	decfsz	9,f
  1406     069B  2E9A               	goto	u687
  1407     069C  0BF0               	decfsz	??_blink,f
  1408     069D  2E9A               	goto	u687
  1409     069E  3200               	nop2
  1410     069F                     l66:
  1411     069F  0008               	return
  1412     06A0                     __end_of_blink:
  1413     0000                     ___latbits      equ	0
  1414     007E                     btemp           set	126	;btemp
  1415     007E                     wtemp0          set	126
  1416                           
  1417                           	psect	config
  1418                           
  1419                           ;Config register CONFIG1 @ 0x8007
  1420                           ;	External Oscillator mode selection bits
  1421                           ;	FEXTOSC = OFF, Oscillator not enabled
  1422                           ;	Power-up default value for COSC bits
  1423                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
  1424                           ;	Clock Out Enable bit
  1425                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
  1426                           ;	Clock Switch Enable bit
  1427                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  1428                           ;	Fail-Safe Clock Monitor Enable bit
  1429                           ;	FCMEN = ON, FSCM timer enabled
  1430     8007                     	org	32775
  1431     8007  3FEC               	dw	16364
  1432                           
  1433                           ;Config register CONFIG2 @ 0x8008
  1434                           ;	Master Clear Enable bit
  1435                           ;	MCLRE = ON, MCLR pin is Master Clear function
  1436                           ;	Power-up Timer Enable bit
  1437                           ;	PWRTE = OFF, PWRT disabled
  1438                           ;	Low-Power BOR enable bit
  1439                           ;	LPBOREN = OFF, ULPBOR disabled
  1440                           ;	Brown-out reset enable bits
  1441                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
  1442                           ;	Brown-out Reset Voltage Selection
  1443                           ;	BORV = 0x1, unprogrammed default
  1444                           ;	Zero-cross detect disable
  1445                           ;	ZCD = 0x1, unprogrammed default
  1446                           ;	Peripheral Pin Select one-way control
  1447                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
  1448                           ;	Stack Overflow/Underflow Reset Enable bit
  1449                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
  1450     8008                     	org	32776
  1451     8008  3FFF               	dw	16383
  1452                           
  1453                           ;Config register CONFIG3 @ 0x8009
  1454                           ;	WDT Period Select bits
  1455                           ;	WDTCPS = 0x1F, unprogrammed default
  1456                           ;	WDT operating mode
  1457                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
  1458                           ;	WDT Window Select bits
  1459                           ;	WDTCWS = 0x7, unprogrammed default
  1460                           ;	WDT input clock selector
  1461                           ;	WDTCCS = 0x7, unprogrammed default
  1462     8009                     	org	32777
  1463     8009  3F9F               	dw	16287

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         1
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      0       2
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _update_leds->_set_pwm_duty
    _set_pwm_duty->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     288
                                             12 COMMON     1     1      0
                              _blink
                         _initialize
                        _update_leds
 ---------------------------------------------------------------------------------
 (1) _update_leds                                          0     0      0     288
                       _set_pwm_duty
 ---------------------------------------------------------------------------------
 (2) _set_pwm_duty                                         6     5      1     288
                                              6 COMMON     6     5      1
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      94
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _blink                                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink
   _initialize
   _update_leds
     _set_pwm_duty
       ___wmul

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BIGRAM             240      0       0      0.0%
COMMON              14     13      14    100.0%
BANK0               80      0       2      2.5%
BANK1               80      0       0      0.0%
BANK2               80      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      16      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Wed Oct  9 15:46:35 2024

            _update_leds 0674                       l63 06F6                       l66 069F  
                     l74 0747                       l90 07BB                       l85 078B  
                     l79 0688                       l95 07B7                       l87 0787  
    ___wmul@multiplicand 0072                      l103 07E5                      l176 06AA  
                    l178 06BE                      l800 06F2                      l810 0694  
                    l802 06F3                      l812 0696                      l804 06F5  
                    l820 0748                      l806 0689                      l814 0674  
                    l830 0755                      l822 074B                      l808 068C  
                    l760 06A0                      l816 0679                      l840 0764  
                    l832 0758                      l824 074E                      l770 06BA  
                    l762 06A2                      l818 0681                      l850 078F  
                    l842 076C                      l834 075A                      l826 0751  
                    l764 06A6                      l780 0712                      l860 07AA  
                    l852 0797                      l844 0771                      l836 075D  
                    l828 0754                      l790 06E2                      l766 06AF  
                    l782 0718                      l774 06F8                      l870 07CC  
                    l862 07AF                      l854 079C                      l846 0779  
                    l838 075F                      l792 06E4                      l768 06B4  
                    l784 072D                      l776 06FD                      l880 07E3  
                    l872 07D1                      l864 07B5                      l856 07A1  
                    l848 077E                      l794 06E8                      l786 0733  
                    l778 0700                      l874 07D6                      l866 07BF  
                    l882 07E9                      l858 07A7                      l796 06EB  
                    l788 06BF                      l884 07EC                      l876 07D9  
                    l868 07C7                      l798 06EF                      l878 07DE  
                    u320 06A6                      u321 06A5                      u410 0679  
                    u411 0678                      u500 079C                      u420 0764  
                    u405 0742                      u501 079B                      u421 0763  
                    u350 06BA                      u510 07A1                      u430 0771  
                    u351 06B9                      u335 06AB                      u511 07A0  
                    u431 0770                      u360 06FD                      u600 07DE  
                    u520 07A7                      u440 0777                      u345 06B0  
                    u361 06FC                      u601 07DD                      u521 07A6  
                    u441 0775                      u370 0718                      u610 07E3  
                    u530 07AF                      u450 0778                      u371 0717  
                    u611 07E2                      u531 07AE                      u620 07E9  
                    u540 07B5                      u460 0785                      u621 07E8  
                    u541 07B4                      u461 0782                      u390 0733  
                    u550 07BB                      u391 0732                      u551 07BA  
                    u560 07BF                      u480 078B                      u385 0727  
                    u561 07BE                      u481 078A                      u570 07CC  
                    u490 078F                      u474 0787                      u571 07CB  
                    u491 078E                      u580 07D1                      u581 07D0  
                    u637 0767                      u590 07D6                      u591 07D5  
                    u647 0792                      u657 07C2                      u667 07EF  
                    u677 068F                      u687 069A                      wreg 0009  
                   _T2PR 028D                     _main 0748                     btemp 007E  
                   start 0001                    ?_main 0070                    _T2CON 028E  
                  _T2HLT 028F                    _T2TMR 028C                    _T2RST 0291  
                  _blink 0689                    status 0003                    wtemp0 007E  
        __initialization 07F5             __end_of_main 07F5                   ??_main 007C  
                 ?_blink 0070                   _RC3PPS 1F23                   _RC4PPS 1F24  
                 ___wmul 06A0  __end_of__initialization 07FE             ?_update_leds 0070  
         __pcstackCOMMON 0070             __pidataBANK0 0672            __end_of_blink 06A0  
                ??_blink 0070            _current_color 007D               __pmaintext 0748  
                ?___wmul 0070                  _PWM3DCH 0315                  _PWM3DCL 0314  
                _PWM4DCH 0319                  _PWM4DCL 0318                  _PWM3CON 0316  
                _PWM4CON 031A                  _PPSLOCK 1E8F          set_pwm_duty@pwm 0079  
             _initialize 06BF                  __ptext1 0674                  __ptext2 06F7  
                __ptext3 06A0                  __ptext4 06BF                  __ptext5 0689  
          ?_set_pwm_duty 0076                _T2CONbits 028E     end_of_initialization 07FE  
              _PORTAbits 000C                _PORTCbits 000E        set_pwm_duty@level 0076  
         ??_set_pwm_duty 0077                _TRISAbits 0012                _TRISCbits 0014  
         __end_of___wmul 06BF              ?_initialize 0070      start_initialization 07F5  
               ??___wmul 0074              __pdataBANK0 0020              __pbssCOMMON 007D  
              ___latbits 0000     __end_of_set_pwm_duty 0748                 _T2CLKCON 0290  
              _red_level 0021           ___wmul@product 0074                 _LATCbits 001A  
       set_pwm_duty@duty 007A        ___wmul@multiplier 0070                 _WPUAbits 1F39  
               _WPUCbits 1F4F            ??_update_leds 007C             ??_initialize 0070  
             _ANSELAbits 1F38               _ANSELCbits 1F4E             _orange_level 0020  
     __end_of_initialize 06F7      __end_of_update_leds 0689             _set_pwm_duty 06F7  
            _PPSLOCKbits 1E8F  
